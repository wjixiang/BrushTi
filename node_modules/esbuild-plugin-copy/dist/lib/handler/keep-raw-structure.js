"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.keepStructureCopyHandler = void 0;
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const chalk_1 = __importDefault(require("chalk"));
const utils_1 = require("../utils");
const mix_raw_structure_1 = require("./mix-raw-structure");
function keepStructureCopyHandler(outDir, rawFromPath, globbedFromPath, baseToPath, verbose = false, dryRun = false) {
    // we keep structure only when input from path ends with /**/*(.ext)
    // for \/* only, we use simple merge copy handler
    // we only support /**/* now
    // and /**/*.js?
    for (const rawFrom of rawFromPath) {
        const { dir } = path_1.default.parse(rawFrom);
        // be default, when ends with /*, glob doesnot expand directories
        // avoid use override option `expandDirectories` and use `/*`
        if (!dir.endsWith('/**')) {
            (0, utils_1.verboseLog)(`You're using ${chalk_1.default.white('Keep-Structure')} mode for the assets paire which its ${chalk_1.default.white('from')} path doesnot ends with ${chalk_1.default.white('/**/*(.ext)')}, fallback to ${chalk_1.default.white('Merge-Structure')} mode`, verbose);
            (0, mix_raw_structure_1.mergeCopyHandler)(outDir, globbedFromPath, baseToPath, verbose);
        }
        const startFragment = dir.replace(`/**`, '');
        const [, preservedDirStructure] = globbedFromPath.split(startFragment);
        const sourcePath = path_1.default.resolve(globbedFromPath);
        const composedDistDirPath = path_1.default.resolve(outDir, baseToPath, preservedDirStructure.slice(1));
        !dryRun && fs_extra_1.default.ensureDirSync(path_1.default.dirname(composedDistDirPath));
        !dryRun && fs_extra_1.default.copyFileSync(sourcePath, composedDistDirPath);
        (0, utils_1.verboseLog)(`${dryRun ? chalk_1.default.white('[DryRun] ') : ''}File copied: ${chalk_1.default.white(sourcePath)} -> ${chalk_1.default.white(composedDistDirPath)}`, verbose);
    }
}
exports.keepStructureCopyHandler = keepStructureCopyHandler;
