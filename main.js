/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => brushtee
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// generate.ts
var import_obsidian = require("obsidian");
var test_generate = "test-view";
var test_gnerate_view = class extends import_obsidian.ItemView {
  constructor(leaf) {
    super(leaf);
  }
  getViewType() {
    return test_generate;
  }
  getDisplayText() {
    return "\u968F\u673A\u62BD\u9898";
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    container.createEl("h4", { text: "main panel" });
  }
  async onClose() {
  }
};

// base.ts
var import_obsidian2 = require("obsidian");
var testdb = class extends import_obsidian2.Plugin {
  //files = this.app.vault.getMarkdownFiles()
  constructor(app2, manifest) {
    super(app2, manifest);
    var files = app2.vault.getMarkdownFiles();
    const targetTag = "#\u9519\u9898";
    this.testfile = this.getFilesByFrontmatterList("tags", "#\u4E60\u9898");
  }
  getFilesByTag(tag) {
    const allFiles = this.app.vault.getMarkdownFiles();
    const taggedFiles = [];
    allFiles.forEach((file) => {
      const fileCache = this.app.metadataCache.getFileCache(file);
      if (fileCache && fileCache.tags) {
        const tags = fileCache.tags.map((t) => t.tag);
        if (tags.includes(tag)) {
          taggedFiles.push(file);
        }
      }
    });
    return taggedFiles;
  }
  getFilesByFrontmatterList(key, value) {
    const allFiles = this.app.vault.getMarkdownFiles();
    const matchedFiles = [];
    allFiles.forEach((file) => {
      const fileCache = this.app.metadataCache.getFileCache(file);
      if (fileCache && fileCache.frontmatter && Array.isArray(fileCache.frontmatter[key])) {
        if (fileCache.frontmatter[key].includes(value)) {
          matchedFiles.push(file);
        }
      }
    });
    return matchedFiles;
  }
};

// main.ts
var brushtee = class extends import_obsidian3.Plugin {
  async onload() {
    const test1 = new testdb(app, this.manifest);
    alert(test1.testfile.length);
    this.registerView(
      test_generate,
      (leaf) => new test_gnerate_view(leaf)
    );
    this.addRibbonIcon("circle", "active panel", () => {
      new import_obsidian3.Notice("active panel");
      this.activateView();
    });
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf = null;
    const leaves = workspace.getLeavesOfType(test_generate);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getRightLeaf(false);
      await leaf.setViewState({ type: test_generate, active: true });
    }
    workspace.revealLeaf(leaf);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJnZW5lcmF0ZS50cyIsICJiYXNlLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgeyBOb3RpY2UsIFBsdWdpbiwgSXRlbVZpZXcsIFdvcmtzcGFjZUxlYWYgLEV2ZW50c30gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQge3Rlc3RfZ25lcmF0ZV92aWV3LCB0ZXN0X2dlbmVyYXRlfSBmcm9tIFwiZ2VuZXJhdGVcIjtcbmltcG9ydCB7IHRlc3RkYiB9IGZyb20gXCJiYXNlXCI7XG5pbXBvcnQgeyBsb2cgfSBmcm9tIFwiY29uc29sZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBicnVzaHRlZSBleHRlbmRzIFBsdWdpbiB7XG4gIGFzeW5jIG9ubG9hZCgpIHtcbiAgICBjb25zdCB0ZXN0MSA9IG5ldyB0ZXN0ZGIoYXBwLHRoaXMubWFuaWZlc3QpXG4gICAgYWxlcnQodGVzdDEudGVzdGZpbGUubGVuZ3RoKVxuXG4gICAgdGhpcy5yZWdpc3RlclZpZXcoXG4gICAgICB0ZXN0X2dlbmVyYXRlLFxuICAgICAgKGxlYWYpID0+IG5ldyB0ZXN0X2duZXJhdGVfdmlldyhsZWFmKVxuICAgICk7XG5cbiAgICB0aGlzLmFkZFJpYmJvbkljb24oJ2NpcmNsZScsICdhY3RpdmUgcGFuZWwnLCAoKSA9PiB7XG4gICAgICBuZXcgTm90aWNlKCdhY3RpdmUgcGFuZWwnKTtcbiAgICAgIHRoaXMuYWN0aXZhdGVWaWV3KCk7XG4gICAgfSk7XG4gIH1cblxuXG5cbiAgYXN5bmMgYWN0aXZhdGVWaWV3KCkge1xuICAgIGNvbnN0IHsgd29ya3NwYWNlIH0gPSB0aGlzLmFwcDtcblxuICAgIGxldCBsZWFmOiBXb3Jrc3BhY2VMZWFmIHwgbnVsbCA9IG51bGw7XG4gICAgY29uc3QgbGVhdmVzID0gd29ya3NwYWNlLmdldExlYXZlc09mVHlwZSh0ZXN0X2dlbmVyYXRlKTtcblxuICAgIGlmIChsZWF2ZXMubGVuZ3RoID4gMCkge1xuICAgICAgLy8gQSBsZWFmIHdpdGggb3VyIHZpZXcgYWxyZWFkeSBleGlzdHMsIHVzZSB0aGF0XG4gICAgICBsZWFmID0gbGVhdmVzWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPdXIgdmlldyBjb3VsZCBub3QgYmUgZm91bmQgaW4gdGhlIHdvcmtzcGFjZSwgY3JlYXRlIGEgbmV3IGxlYWZcbiAgICAgIC8vIGluIHRoZSByaWdodCBzaWRlYmFyIGZvciBpdFxuICAgICAgbGVhZiA9IHdvcmtzcGFjZS5nZXRSaWdodExlYWYoZmFsc2UpO1xuICAgICAgYXdhaXQgbGVhZi5zZXRWaWV3U3RhdGUoeyB0eXBlOiB0ZXN0X2dlbmVyYXRlLCBhY3RpdmU6IHRydWUgfSk7XG4gICAgfVxuXG4gICAgLy8gXCJSZXZlYWxcIiB0aGUgbGVhZiBpbiBjYXNlIGl0IGlzIGluIGEgY29sbGFwc2VkIHNpZGViYXJcbiAgICB3b3Jrc3BhY2UucmV2ZWFsTGVhZihsZWFmKTtcbiAgfVxufVxuIiwgImltcG9ydCB7IEl0ZW1WaWV3LCBXb3Jrc3BhY2VMZWFmIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5cbmV4cG9ydCBjb25zdCB0ZXN0X2dlbmVyYXRlID0gXCJ0ZXN0LXZpZXdcIjtcblxuZXhwb3J0IGNsYXNzIHRlc3RfZ25lcmF0ZV92aWV3IGV4dGVuZHMgSXRlbVZpZXcge1xuICBjb25zdHJ1Y3RvcihsZWFmOiBXb3Jrc3BhY2VMZWFmKSB7XG4gICAgc3VwZXIobGVhZik7XG4gIH1cblxuICBnZXRWaWV3VHlwZSgpIHtcbiAgICByZXR1cm4gdGVzdF9nZW5lcmF0ZTtcbiAgfVxuXG4gIGdldERpc3BsYXlUZXh0KCkge1xuICAgIHJldHVybiBcIlx1OTY4Rlx1NjczQVx1NjJCRFx1OTg5OFwiO1xuICB9XG5cbiAgYXN5bmMgb25PcGVuKCkge1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyRWwuY2hpbGRyZW5bMV07XG4gICAgY29udGFpbmVyLmVtcHR5KCk7XG4gICAgY29udGFpbmVyLmNyZWF0ZUVsKFwiaDRcIiwgeyB0ZXh0OiBcIm1haW4gcGFuZWxcIiB9KTtcbiAgfVxuXG4gIGFzeW5jIG9uQ2xvc2UoKSB7XG4gICAgLy8gTm90aGluZyB0byBjbGVhbiB1cC5cbiAgfVxufSIsICJpbXBvcnQge0FwcCwgUGx1Z2luLFBsdWdpbk1hbmlmZXN0LCBURmlsZX0gZnJvbSAnb2JzaWRpYW4nO1xuXG5cblxuZXhwb3J0IGNsYXNzIHRlc3RkYiBleHRlbmRzIFBsdWdpbiB7XG4gICAgdGVzdGZpbGU6IFRGaWxlW107XG4gICAgLy9maWxlcyA9IHRoaXMuYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKVxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBtYW5pZmVzdDogUGx1Z2luTWFuaWZlc3Qpe1xuICAgICAgICBzdXBlcihhcHAsbWFuaWZlc3QpXG4gICAgICAgIHZhciBmaWxlcyA9IGFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG4gICAgICAgIGNvbnN0IHRhcmdldFRhZyA9ICcjXHU5NTE5XHU5ODk4JztcbiAgICAgICAgLy8gZmlsZXMuZm9yRWFjaChmaWxlID0+IHtcbiAgICAgICAgLy8gICAgIHZhciBmaWxlQ2FjaGUgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcbiAgICAgICAgLy8gICAgIHZhciBmdGFncyA9IGZpbGVDYWNoZS50YWdzXG4gICAgICAgIC8vICAgICBpZiAoZnRhZ3MudGFnLmluY2x1ZGVzKHRhcmdldFRhZykpIHtcbiAgICAgICAgLy8gICAgICAgICB0aGlzLnRlc3RmaWxlLnB1c2goZmlsZSk7XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vIH0pO1xuICAgICAgICB0aGlzLnRlc3RmaWxlID0gdGhpcy5nZXRGaWxlc0J5RnJvbnRtYXR0ZXJMaXN0KCd0YWdzJywnI1x1NEU2MFx1OTg5OCcpXG4gICAgfVxuXG4gICAgZ2V0RmlsZXNCeVRhZyh0YWc6IHN0cmluZyk6IFRGaWxlW10ge1xuICAgICAgICBjb25zdCBhbGxGaWxlcyA9IHRoaXMuYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcbiAgICAgICAgY29uc3QgdGFnZ2VkRmlsZXM6IFRGaWxlW10gPSBbXTtcblxuICAgICAgICBhbGxGaWxlcy5mb3JFYWNoKGZpbGUgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmlsZUNhY2hlID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk7XG4gICAgICAgICAgICBpZiAoZmlsZUNhY2hlICYmIGZpbGVDYWNoZS50YWdzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGFncyA9IGZpbGVDYWNoZS50YWdzLm1hcCh0ID0+IHQudGFnKTtcbiAgICAgICAgICAgICAgICBpZiAodGFncy5pbmNsdWRlcyh0YWcpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhZ2dlZEZpbGVzLnB1c2goZmlsZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGFnZ2VkRmlsZXM7XG4gICAgfVxuXG4gICAgZ2V0RmlsZXNCeUZyb250bWF0dGVyTGlzdChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IFRGaWxlW10ge1xuICAgICAgICBjb25zdCBhbGxGaWxlcyA9IHRoaXMuYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcbiAgICAgICAgY29uc3QgbWF0Y2hlZEZpbGVzOiBURmlsZVtdID0gW107XG5cbiAgICAgICAgYWxsRmlsZXMuZm9yRWFjaChmaWxlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVDYWNoZSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpO1xuICAgICAgICAgICAgaWYgKGZpbGVDYWNoZSAmJiBmaWxlQ2FjaGUuZnJvbnRtYXR0ZXIgJiYgQXJyYXkuaXNBcnJheShmaWxlQ2FjaGUuZnJvbnRtYXR0ZXJba2V5XSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoZmlsZUNhY2hlLmZyb250bWF0dGVyW2tleV0uaW5jbHVkZXModmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoZWRGaWxlcy5wdXNoKGZpbGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIG1hdGNoZWRGaWxlcztcbiAgICB9XG5cbn0iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBQUEsbUJBQStEOzs7QUNBL0Qsc0JBQXdDO0FBRWpDLElBQU0sZ0JBQWdCO0FBRXRCLElBQU0sb0JBQU4sY0FBZ0MseUJBQVM7QUFBQSxFQUM5QyxZQUFZLE1BQXFCO0FBQy9CLFVBQU0sSUFBSTtBQUFBLEVBQ1o7QUFBQSxFQUVBLGNBQWM7QUFDWixXQUFPO0FBQUEsRUFDVDtBQUFBLEVBRUEsaUJBQWlCO0FBQ2YsV0FBTztBQUFBLEVBQ1Q7QUFBQSxFQUVBLE1BQU0sU0FBUztBQUNiLFVBQU0sWUFBWSxLQUFLLFlBQVksU0FBUyxDQUFDO0FBQzdDLGNBQVUsTUFBTTtBQUNoQixjQUFVLFNBQVMsTUFBTSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQUEsRUFDakQ7QUFBQSxFQUVBLE1BQU0sVUFBVTtBQUFBLEVBRWhCO0FBQ0Y7OztBQzFCQSxJQUFBQyxtQkFBZ0Q7QUFJekMsSUFBTSxTQUFOLGNBQXFCLHdCQUFPO0FBQUE7QUFBQSxFQUcvQixZQUFZQyxNQUFVLFVBQXlCO0FBQzNDLFVBQU1BLE1BQUksUUFBUTtBQUNsQixRQUFJLFFBQVFBLEtBQUksTUFBTSxpQkFBaUI7QUFDdkMsVUFBTSxZQUFZO0FBUWxCLFNBQUssV0FBVyxLQUFLLDBCQUEwQixRQUFPLGVBQUs7QUFBQSxFQUMvRDtBQUFBLEVBRUEsY0FBYyxLQUFzQjtBQUNoQyxVQUFNLFdBQVcsS0FBSyxJQUFJLE1BQU0saUJBQWlCO0FBQ2pELFVBQU0sY0FBdUIsQ0FBQztBQUU5QixhQUFTLFFBQVEsVUFBUTtBQUNyQixZQUFNLFlBQVksS0FBSyxJQUFJLGNBQWMsYUFBYSxJQUFJO0FBQzFELFVBQUksYUFBYSxVQUFVLE1BQU07QUFDN0IsY0FBTSxPQUFPLFVBQVUsS0FBSyxJQUFJLE9BQUssRUFBRSxHQUFHO0FBQzFDLFlBQUksS0FBSyxTQUFTLEdBQUcsR0FBRztBQUNwQixzQkFBWSxLQUFLLElBQUk7QUFBQSxRQUN6QjtBQUFBLE1BQ0o7QUFBQSxJQUNKLENBQUM7QUFFRCxXQUFPO0FBQUEsRUFDWDtBQUFBLEVBRUEsMEJBQTBCLEtBQWEsT0FBd0I7QUFDM0QsVUFBTSxXQUFXLEtBQUssSUFBSSxNQUFNLGlCQUFpQjtBQUNqRCxVQUFNLGVBQXdCLENBQUM7QUFFL0IsYUFBUyxRQUFRLFVBQVE7QUFDckIsWUFBTSxZQUFZLEtBQUssSUFBSSxjQUFjLGFBQWEsSUFBSTtBQUMxRCxVQUFJLGFBQWEsVUFBVSxlQUFlLE1BQU0sUUFBUSxVQUFVLFlBQVksR0FBRyxDQUFDLEdBQUc7QUFDakYsWUFBSSxVQUFVLFlBQVksR0FBRyxFQUFFLFNBQVMsS0FBSyxHQUFHO0FBQzVDLHVCQUFhLEtBQUssSUFBSTtBQUFBLFFBQzFCO0FBQUEsTUFDSjtBQUFBLElBQ0osQ0FBQztBQUVELFdBQU87QUFBQSxFQUNYO0FBRUo7OztBRmpEQSxJQUFxQixXQUFyQixjQUFzQyx3QkFBTztBQUFBLEVBQzNDLE1BQU0sU0FBUztBQUNiLFVBQU0sUUFBUSxJQUFJLE9BQU8sS0FBSSxLQUFLLFFBQVE7QUFDMUMsVUFBTSxNQUFNLFNBQVMsTUFBTTtBQUUzQixTQUFLO0FBQUEsTUFDSDtBQUFBLE1BQ0EsQ0FBQyxTQUFTLElBQUksa0JBQWtCLElBQUk7QUFBQSxJQUN0QztBQUVBLFNBQUssY0FBYyxVQUFVLGdCQUFnQixNQUFNO0FBQ2pELFVBQUksd0JBQU8sY0FBYztBQUN6QixXQUFLLGFBQWE7QUFBQSxJQUNwQixDQUFDO0FBQUEsRUFDSDtBQUFBLEVBSUEsTUFBTSxlQUFlO0FBQ25CLFVBQU0sRUFBRSxVQUFVLElBQUksS0FBSztBQUUzQixRQUFJLE9BQTZCO0FBQ2pDLFVBQU0sU0FBUyxVQUFVLGdCQUFnQixhQUFhO0FBRXRELFFBQUksT0FBTyxTQUFTLEdBQUc7QUFFckIsYUFBTyxPQUFPLENBQUM7QUFBQSxJQUNqQixPQUFPO0FBR0wsYUFBTyxVQUFVLGFBQWEsS0FBSztBQUNuQyxZQUFNLEtBQUssYUFBYSxFQUFFLE1BQU0sZUFBZSxRQUFRLEtBQUssQ0FBQztBQUFBLElBQy9EO0FBR0EsY0FBVSxXQUFXLElBQUk7QUFBQSxFQUMzQjtBQUNGOyIsCiAgIm5hbWVzIjogWyJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImFwcCJdCn0K
