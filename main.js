/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ExamplePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var ALL_EMOJIS = {
  ":+1:": "\u{1F44D}",
  ":sunglasses:": "\u{1F60E}",
  ":smile:": "\u{1F604}"
};
var ExamplePlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.registerMarkdownPostProcessor((element, context) => {
      var _a;
      const codeblocks = element.findAll("task");
      for (let codeblock of codeblocks) {
        const text = codeblock.innerText.trim();
        if (text[0] === ":" && text[text.length - 1] === ":") {
          const emojiEl = codeblock.createSpan({
            text: (_a = ALL_EMOJIS[text]) != null ? _a : text
          });
          codeblock.replaceWith(emojiEl);
        }
      }
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5cbmNvbnN0IEFMTF9FTU9KSVM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG4gIFwiOisxOlwiOiBcIlx1RDgzRFx1REM0RFwiLFxuICBcIjpzdW5nbGFzc2VzOlwiOiBcIlx1RDgzRFx1REUwRVwiLFxuICBcIjpzbWlsZTpcIjogXCJcdUQ4M0RcdURFMDRcIixcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV4YW1wbGVQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xuICBhc3luYyBvbmxvYWQoKSB7XG4gICAgdGhpcy5yZWdpc3Rlck1hcmtkb3duUG9zdFByb2Nlc3NvcigoZWxlbWVudCwgY29udGV4dCkgPT4ge1xuICAgICAgY29uc3QgY29kZWJsb2NrcyA9IGVsZW1lbnQuZmluZEFsbChcInRhc2tcIik7XG5cbiAgICAgIGZvciAobGV0IGNvZGVibG9jayBvZiBjb2RlYmxvY2tzKSB7XG4gICAgICAgIGNvbnN0IHRleHQgPSBjb2RlYmxvY2suaW5uZXJUZXh0LnRyaW0oKTtcbiAgICAgICAgaWYgKHRleHRbMF0gPT09IFwiOlwiICYmIHRleHRbdGV4dC5sZW5ndGggLSAxXSA9PT0gXCI6XCIpIHtcbiAgICAgICAgICBjb25zdCBlbW9qaUVsID0gY29kZWJsb2NrLmNyZWF0ZVNwYW4oe1xuICAgICAgICAgICAgdGV4dDogQUxMX0VNT0pJU1t0ZXh0XSA/PyB0ZXh0LFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNvZGVibG9jay5yZXBsYWNlV2l0aChlbW9qaUVsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBQXVCO0FBRXZCLElBQU0sYUFBcUM7QUFBQSxFQUN6QyxRQUFRO0FBQUEsRUFDUixnQkFBZ0I7QUFBQSxFQUNoQixXQUFXO0FBQ2I7QUFFQSxJQUFxQixnQkFBckIsY0FBMkMsdUJBQU87QUFBQSxFQUNoRCxNQUFNLFNBQVM7QUFDYixTQUFLLDhCQUE4QixDQUFDLFNBQVMsWUFBWTtBQVY3RDtBQVdNLFlBQU0sYUFBYSxRQUFRLFFBQVEsTUFBTTtBQUV6QyxlQUFTLGFBQWEsWUFBWTtBQUNoQyxjQUFNLE9BQU8sVUFBVSxVQUFVLEtBQUs7QUFDdEMsWUFBSSxLQUFLLENBQUMsTUFBTSxPQUFPLEtBQUssS0FBSyxTQUFTLENBQUMsTUFBTSxLQUFLO0FBQ3BELGdCQUFNLFVBQVUsVUFBVSxXQUFXO0FBQUEsWUFDbkMsT0FBTSxnQkFBVyxJQUFJLE1BQWYsWUFBb0I7QUFBQSxVQUM1QixDQUFDO0FBQ0Qsb0JBQVUsWUFBWSxPQUFPO0FBQUEsUUFDL0I7QUFBQSxNQUNGO0FBQUEsSUFDRixDQUFDO0FBQUEsRUFDSDtBQUNGOyIsCiAgIm5hbWVzIjogW10KfQo=
