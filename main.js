/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => brushtee
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// randomtest.ts
var import_obsidian = require("obsidian");
var VIEW_TYPE_EXAMPLE = "test-view";
var ExampleView = class extends import_obsidian.ItemView {
  constructor(leaf) {
    super(leaf);
  }
  getViewType() {
    return VIEW_TYPE_EXAMPLE;
  }
  getDisplayText() {
    return "\u968F\u673A\u62BD\u9898";
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    container.createEl("h4", { text: "main panel" });
  }
  async onClose() {
  }
};

// base.ts
var import_obsidian2 = require("obsidian");
var testdb = class extends import_obsidian2.Plugin {
  //files = this.app.vault.getMarkdownFiles()
  constructor(app2, manifest) {
    super(app2, manifest);
    var files = app2.vault.getMarkdownFiles();
    const targetTag = "#\u9519\u9898";
    this.testfile = files.filter(async (file) => {
      const content = await app2.vault.read(file);
      return content.includes(targetTag);
    });
  }
};

// main.ts
var brushtee = class extends import_obsidian3.Plugin {
  async onload() {
    const test1 = new testdb(app, this.manifest);
    alert(test1.testfile);
    this.registerView(
      VIEW_TYPE_EXAMPLE,
      (leaf) => new ExampleView(leaf)
    );
    this.addRibbonIcon("circle", "active panel", () => {
      new import_obsidian3.Notice("active panel");
      this.activateView();
    });
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf = null;
    const leaves = workspace.getLeavesOfType(VIEW_TYPE_EXAMPLE);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getRightLeaf(false);
      await leaf.setViewState({ type: VIEW_TYPE_EXAMPLE, active: true });
    }
    workspace.revealLeaf(leaf);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJyYW5kb210ZXN0LnRzIiwgImJhc2UudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IE5vdGljZSwgUGx1Z2luLCBJdGVtVmlldywgV29ya3NwYWNlTGVhZiAsRXZlbnRzfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7RXhhbXBsZVZpZXcsIFZJRVdfVFlQRV9FWEFNUExFfSBmcm9tIFwiLi9yYW5kb210ZXN0XCI7XG5pbXBvcnQgeyB0ZXN0ZGIgfSBmcm9tIFwiYmFzZVwiO1xuaW1wb3J0IHsgbG9nIH0gZnJvbSBcImNvbnNvbGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgYnJ1c2h0ZWUgZXh0ZW5kcyBQbHVnaW4ge1xuICBhc3luYyBvbmxvYWQoKSB7XG4gICAgY29uc3QgdGVzdDEgPSBuZXcgdGVzdGRiKGFwcCx0aGlzLm1hbmlmZXN0KVxuICAgIGFsZXJ0KHRlc3QxLnRlc3RmaWxlKVxuXG4gICAgdGhpcy5yZWdpc3RlclZpZXcoXG4gICAgICBWSUVXX1RZUEVfRVhBTVBMRSxcbiAgICAgIChsZWFmKSA9PiBuZXcgRXhhbXBsZVZpZXcobGVhZilcbiAgICApO1xuXG4gICAgdGhpcy5hZGRSaWJib25JY29uKCdjaXJjbGUnLCAnYWN0aXZlIHBhbmVsJywgKCkgPT4ge1xuICAgICAgbmV3IE5vdGljZSgnYWN0aXZlIHBhbmVsJyk7XG4gICAgICB0aGlzLmFjdGl2YXRlVmlldygpO1xuICAgIH0pO1xuICB9XG5cblxuXG4gIGFzeW5jIGFjdGl2YXRlVmlldygpIHtcbiAgICBjb25zdCB7IHdvcmtzcGFjZSB9ID0gdGhpcy5hcHA7XG5cbiAgICBsZXQgbGVhZjogV29ya3NwYWNlTGVhZiB8IG51bGwgPSBudWxsO1xuICAgIGNvbnN0IGxlYXZlcyA9IHdvcmtzcGFjZS5nZXRMZWF2ZXNPZlR5cGUoVklFV19UWVBFX0VYQU1QTEUpO1xuXG4gICAgaWYgKGxlYXZlcy5sZW5ndGggPiAwKSB7XG4gICAgICAvLyBBIGxlYWYgd2l0aCBvdXIgdmlldyBhbHJlYWR5IGV4aXN0cywgdXNlIHRoYXRcbiAgICAgIGxlYWYgPSBsZWF2ZXNbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE91ciB2aWV3IGNvdWxkIG5vdCBiZSBmb3VuZCBpbiB0aGUgd29ya3NwYWNlLCBjcmVhdGUgYSBuZXcgbGVhZlxuICAgICAgLy8gaW4gdGhlIHJpZ2h0IHNpZGViYXIgZm9yIGl0XG4gICAgICBsZWFmID0gd29ya3NwYWNlLmdldFJpZ2h0TGVhZihmYWxzZSk7XG4gICAgICBhd2FpdCBsZWFmLnNldFZpZXdTdGF0ZSh7IHR5cGU6IFZJRVdfVFlQRV9FWEFNUExFLCBhY3RpdmU6IHRydWUgfSk7XG4gICAgfVxuXG4gICAgLy8gXCJSZXZlYWxcIiB0aGUgbGVhZiBpbiBjYXNlIGl0IGlzIGluIGEgY29sbGFwc2VkIHNpZGViYXJcbiAgICB3b3Jrc3BhY2UucmV2ZWFsTGVhZihsZWFmKTtcbiAgfVxufVxuIiwgImltcG9ydCB7IEl0ZW1WaWV3LCBXb3Jrc3BhY2VMZWFmIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5cbmV4cG9ydCBjb25zdCBWSUVXX1RZUEVfRVhBTVBMRSA9IFwidGVzdC12aWV3XCI7XG5cbmV4cG9ydCBjbGFzcyBFeGFtcGxlVmlldyBleHRlbmRzIEl0ZW1WaWV3IHtcbiAgY29uc3RydWN0b3IobGVhZjogV29ya3NwYWNlTGVhZikge1xuICAgIHN1cGVyKGxlYWYpO1xuICB9XG5cbiAgZ2V0Vmlld1R5cGUoKSB7XG4gICAgcmV0dXJuIFZJRVdfVFlQRV9FWEFNUExFO1xuICB9XG5cbiAgZ2V0RGlzcGxheVRleHQoKSB7XG4gICAgcmV0dXJuIFwiXHU5NjhGXHU2NzNBXHU2MkJEXHU5ODk4XCI7XG4gIH1cblxuICBhc3luYyBvbk9wZW4oKSB7XG4gICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXJFbC5jaGlsZHJlblsxXTtcbiAgICBjb250YWluZXIuZW1wdHkoKTtcbiAgICBjb250YWluZXIuY3JlYXRlRWwoXCJoNFwiLCB7IHRleHQ6IFwibWFpbiBwYW5lbFwiIH0pO1xuICB9XG5cbiAgYXN5bmMgb25DbG9zZSgpIHtcbiAgICAvLyBOb3RoaW5nIHRvIGNsZWFuIHVwLlxuICB9XG59IiwgImltcG9ydCB7QXBwLCBQbHVnaW4sUGx1Z2luTWFuaWZlc3QsIFRGaWxlfSBmcm9tICdvYnNpZGlhbic7XG5cblxuXG5leHBvcnQgY2xhc3MgdGVzdGRiIGV4dGVuZHMgUGx1Z2luIHtcbiAgICB0ZXN0ZmlsZTogVEZpbGVbXTtcbiAgICAvL2ZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIG1hbmlmZXN0OiBQbHVnaW5NYW5pZmVzdCl7XG4gICAgICAgIHN1cGVyKGFwcCxtYW5pZmVzdClcbiAgICAgICAgdmFyIGZpbGVzID0gYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcbiAgICAgICAgY29uc3QgdGFyZ2V0VGFnID0gJyNcdTk1MTlcdTk4OTgnO1xuXG4gICAgICAgIHRoaXMudGVzdGZpbGUgPSBmaWxlcy5maWx0ZXIoYXN5bmMgKGZpbGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCBhcHAudmF1bHQucmVhZChmaWxlKTtcbiAgICAgICAgICAgIHJldHVybiBjb250ZW50LmluY2x1ZGVzKHRhcmdldFRhZyk7XG4gICAgICAgIH0pO1xuICAgIH1cbn0iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBQUEsbUJBQStEOzs7QUNBL0Qsc0JBQXdDO0FBRWpDLElBQU0sb0JBQW9CO0FBRTFCLElBQU0sY0FBTixjQUEwQix5QkFBUztBQUFBLEVBQ3hDLFlBQVksTUFBcUI7QUFDL0IsVUFBTSxJQUFJO0FBQUEsRUFDWjtBQUFBLEVBRUEsY0FBYztBQUNaLFdBQU87QUFBQSxFQUNUO0FBQUEsRUFFQSxpQkFBaUI7QUFDZixXQUFPO0FBQUEsRUFDVDtBQUFBLEVBRUEsTUFBTSxTQUFTO0FBQ2IsVUFBTSxZQUFZLEtBQUssWUFBWSxTQUFTLENBQUM7QUFDN0MsY0FBVSxNQUFNO0FBQ2hCLGNBQVUsU0FBUyxNQUFNLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFBQSxFQUNqRDtBQUFBLEVBRUEsTUFBTSxVQUFVO0FBQUEsRUFFaEI7QUFDRjs7O0FDMUJBLElBQUFDLG1CQUFnRDtBQUl6QyxJQUFNLFNBQU4sY0FBcUIsd0JBQU87QUFBQTtBQUFBLEVBRy9CLFlBQVlDLE1BQVUsVUFBeUI7QUFDM0MsVUFBTUEsTUFBSSxRQUFRO0FBQ2xCLFFBQUksUUFBUUEsS0FBSSxNQUFNLGlCQUFpQjtBQUN2QyxVQUFNLFlBQVk7QUFFbEIsU0FBSyxXQUFXLE1BQU0sT0FBTyxPQUFPLFNBQVM7QUFDekMsWUFBTSxVQUFVLE1BQU1BLEtBQUksTUFBTSxLQUFLLElBQUk7QUFDekMsYUFBTyxRQUFRLFNBQVMsU0FBUztBQUFBLElBQ3JDLENBQUM7QUFBQSxFQUNMO0FBQ0o7OztBRlpBLElBQXFCLFdBQXJCLGNBQXNDLHdCQUFPO0FBQUEsRUFDM0MsTUFBTSxTQUFTO0FBQ2IsVUFBTSxRQUFRLElBQUksT0FBTyxLQUFJLEtBQUssUUFBUTtBQUMxQyxVQUFNLE1BQU0sUUFBUTtBQUVwQixTQUFLO0FBQUEsTUFDSDtBQUFBLE1BQ0EsQ0FBQyxTQUFTLElBQUksWUFBWSxJQUFJO0FBQUEsSUFDaEM7QUFFQSxTQUFLLGNBQWMsVUFBVSxnQkFBZ0IsTUFBTTtBQUNqRCxVQUFJLHdCQUFPLGNBQWM7QUFDekIsV0FBSyxhQUFhO0FBQUEsSUFDcEIsQ0FBQztBQUFBLEVBQ0g7QUFBQSxFQUlBLE1BQU0sZUFBZTtBQUNuQixVQUFNLEVBQUUsVUFBVSxJQUFJLEtBQUs7QUFFM0IsUUFBSSxPQUE2QjtBQUNqQyxVQUFNLFNBQVMsVUFBVSxnQkFBZ0IsaUJBQWlCO0FBRTFELFFBQUksT0FBTyxTQUFTLEdBQUc7QUFFckIsYUFBTyxPQUFPLENBQUM7QUFBQSxJQUNqQixPQUFPO0FBR0wsYUFBTyxVQUFVLGFBQWEsS0FBSztBQUNuQyxZQUFNLEtBQUssYUFBYSxFQUFFLE1BQU0sbUJBQW1CLFFBQVEsS0FBSyxDQUFDO0FBQUEsSUFDbkU7QUFHQSxjQUFVLFdBQVcsSUFBSTtBQUFBLEVBQzNCO0FBQ0Y7IiwKICAibmFtZXMiOiBbImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiYXBwIl0KfQo=
