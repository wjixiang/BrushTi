/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
__export(exports, {
  ExampleView: () => ExampleView,
  VIEW_TYPE_EXAMPLE: () => VIEW_TYPE_EXAMPLE,
  chouti: () => chouti,
  default: () => ExamplePlugin
});
var import_obsidian = __toModule(require("obsidian"));
var import_obsidian2 = __toModule(require("obsidian"));
var answer = "NONE";
var filesWithTag = tag();
var select_t = getRandomElements(filesWithTag, 1);
var timu = select_t[0];
var clas_t = [];
var select_class = "\u75C5\u751F";
var select_number = 3;
var flag = 0;
function getRandomElements(arr, n) {
  let result = [];
  let len = arr.length;
  let taken = new Array(len);
  if (n > len)
    throw new RangeError("getRandomElements: more elements taken than available");
  while (n--) {
    let x = Math.floor(Math.random() * len);
    result.push(arr[x in taken ? taken[x] : x]);
    taken[x] = --len in taken ? taken[len] : len;
  }
  return result;
}
function weight(filelist) {
  let weight_list = [];
  let totalWeight = 0;
  for (var i = 0; i < filelist.length; i++) {
    let wei_a = this.app.metadataCache.getFileCache(filelist[i]).frontmatter.times;
    let wei_b = this.app.metadataCache.getFileCache(filelist[i]).frontmatter.link;
    totalWeight = totalWeight + wei_b / wei_a;
    weight_list.push(wei_b / wei_a);
  }
  let randomNum = Math.random() * totalWeight;
  let weightSum = 0;
  for (let i2 = 0; i2 < weight_list.length; i2++) {
    weightSum += weight_list[i2];
    if (randomNum <= weightSum) {
      return i2;
    }
  }
}
function tag() {
  const tagName = "\u9519\u9898";
  const markdownFiles = this.app.vault.getMarkdownFiles();
  const filesWithTag2 = [];
  for (let file of markdownFiles) {
    const cache = this.app.metadataCache.getFileCache(file);
    if (cache && cache.tags) {
      for (let tag2 of cache.tags) {
        if (tag2.tag.includes(`#${tagName}`)) {
          filesWithTag2.push(file);
          break;
        }
      }
    }
  }
  return filesWithTag2;
}
function classify(flist, clas) {
  clas_t = [];
  flist.forEach((note) => {
    let properties = this.app.metadataCache.getFileCache(note).frontmatter;
    if (properties && properties.class === clas) {
      clas_t.push(note);
    }
  });
  return clas_t;
}
var VIEW_TYPE_EXAMPLE = "example-view";
var ExampleView = class extends import_obsidian.ItemView {
  constructor(leaf) {
    super(leaf);
  }
  getViewType() {
    return VIEW_TYPE_EXAMPLE;
  }
  getDisplayText() {
    return "BrushTi";
  }
  onOpen() {
    return __async(this, null, function* () {
      const container = this.containerEl.children[1];
      container.empty();
      container.createEl("h1", { text: "wjx" });
      container.innerHTML = `
	<head>
		<style>
			button {
				font-size: 16px;
				border: none;
				border-radius: 5px;
				color: white;
			}
			#tn {
				background-color: #4CAF50;
			}
			#dn {
				background-color: #008CBA;
			}
			#tz {
				background-color: #f44336;
			}
			#t, #f {
				background-color: #555555;
			}
			#note-content {
				padding: 15px;
				color: #87CEEB;
				border-radius: 5px;
				box-shadow: 0 2px 5px rgba(0,0,0,0.3);
			}
			#note-answer {
				padding: 15px;
				color: #87CEEB;
				border-radius: 5px;
				box-shadow: 0 2px 5px rgba(0,0,0,0.3);
			}
			.button-container {
				display: flex;
				justify-content: space-between;
				width: 100%;
			  }
		</style>
	</head>
	<body>
		<input type="text" id="class">
        <input type="text" id="number">
		<button id="tn">\u62BD\u9898</button>
		</br>
		<br/>
		<p id="note-content"></p>
		<p id="note-answer"></p>
		<div class="button-container">
		<button id="dd">\u2705</button>
		<button id="dn">\u7B54\u6848</button>
		<button id="tz">\u8DF3\u8F6C</button>
		<button id="cc">\u274C</button>
	  </div>
		<div id="markdown-output"></div>
	</body>
	
	`;
      const button2 = container.querySelector("#tn");
      button2.addEventListener("click", () => __async(this, null, function* () {
        select_class = container.querySelector("#class").value;
        select_number = container.querySelector("#number").value;
        filesWithTag = classify(tag(), select_class);
        timu = filesWithTag[weight(filesWithTag)];
        timu = timu.slice(0, select_number);
        flag = 0;
        var content = this.app.vault.read(timu).then((content2) => {
          let markdown = content2;
          let match = markdown.match(/```ad-question([^`]+)```/);
          let codeBlock = match[1];
          let lines = codeBlock.split("\n");
          lines = lines.filter((line) => !line.startsWith("title:"));
          var result = lines.join("\n");
          var text = result.replace(/(\n|\r|\r\n|\u21b5)/g, "<br/>");
          container.querySelector("#note-content").innerHTML = text;
        });
        var answe = this.app.vault.read(timu).then((content2) => {
          let markdown = content2;
          let match = markdown.match(/```ad-note([^`]+)```/);
          let codeBlock = match[1];
          let lines = codeBlock.split("\n");
          lines = lines.filter((line) => !line.startsWith("collapse:"));
          lines = lines.filter((line) => !line.startsWith("title:"));
          var result = lines.join("\n");
          answer = result.replace(/(\n|\r|\r\n|\u21b5)/g, "<br/>");
        });
        container.querySelector("#note-answer").innerHTML = "";
      }));
      const button3 = container.querySelector("#dn");
      button3.addEventListener("click", () => __async(this, null, function* () {
        container.querySelector("#note-answer").innerHTML = answer;
      }));
      const button4 = container.querySelector("#tz");
      button4.addEventListener("click", () => __async(this, null, function* () {
        this.app.workspace.openLinkText(timu.basename, timu.path, true);
      }));
      const button5 = container.querySelector("#dd");
      button5.addEventListener("click", () => __async(this, null, function* () {
        let cache = this.app.metadataCache.getFileCache(timu);
        let wrong_times = cache.frontmatter.link;
        let sum_times = cache.frontmatter.times;
        console.log(wrong_times);
        this.app.fileManager.processFrontMatter(timu, (frontmatter) => {
          frontmatter.times = sum_times + 1;
          return frontmatter;
        });
        select_class = container.querySelector("#class").value;
        filesWithTag = classify(tag(), select_class);
        timu = filesWithTag[weight(filesWithTag)];
        var content = this.app.vault.read(timu).then((content2) => {
          let markdown = content2;
          let match = markdown.match(/```ad-question([^`]+)```/);
          let codeBlock = match[1];
          let lines = codeBlock.split("\n");
          lines = lines.filter((line) => !line.startsWith("title:"));
          var result = lines.join("\n");
          var text = result.replace(/(\n|\r|\r\n|\u21b5)/g, "<br/>");
          container.querySelector("#note-content").innerHTML = text;
        });
        var answe = this.app.vault.read(timu).then((content2) => {
          let markdown = content2;
          let match = markdown.match(/```ad-note([^`]+)```/);
          let codeBlock = match[1];
          let lines = codeBlock.split("\n");
          lines = lines.filter((line) => !line.startsWith("collapse:"));
          lines = lines.filter((line) => !line.startsWith("title:"));
          var result = lines.join("\n");
          answer = result.replace(/(\n|\r|\r\n|\u21b5)/g, "<br/>");
        });
        container.querySelector("#note-answer").innerHTML = "";
      }));
      const button6 = container.querySelector("#cc");
      button6.addEventListener("click", () => __async(this, null, function* () {
        let cache = this.app.metadataCache.getFileCache(timu);
        let wrong_times = cache.frontmatter.link;
        let sum_times = cache.frontmatter.times;
        console.log(wrong_times);
        this.app.fileManager.processFrontMatter(timu, (frontmatter) => {
          frontmatter.link = wrong_times + 1;
          return frontmatter;
        });
        select_class = container.querySelector("#class").value;
        filesWithTag = classify(tag(), select_class);
        timu = filesWithTag[weight(filesWithTag)];
        var content = this.app.vault.read(timu).then((content2) => {
          let markdown = content2;
          let match = markdown.match(/```ad-question([^`]+)```/);
          let codeBlock = match[1];
          let lines = codeBlock.split("\n");
          lines = lines.filter((line) => !line.startsWith("title:"));
          var result = lines.join("\n");
          var text = result.replace(/(\n|\r|\r\n|\u21b5)/g, "<br/>");
          container.querySelector("#note-content").innerHTML = text;
        });
        var answe = this.app.vault.read(timu).then((content2) => {
          let markdown = content2;
          let match = markdown.match(/```ad-note([^`]+)```/);
          let codeBlock = match[1];
          let lines = codeBlock.split("\n");
          lines = lines.filter((line) => !line.startsWith("collapse:"));
          lines = lines.filter((line) => !line.startsWith("title:"));
          var result = lines.join("\n");
          answer = result.replace(/(\n|\r|\r\n|\u21b5)/g, "<br/>");
        });
        container.querySelector("#note-answer").innerHTML = "";
      }));
    });
  }
  onClose() {
    return __async(this, null, function* () {
    });
  }
};
var ExamplePlugin = class extends import_obsidian2.Plugin {
  onload() {
    return __async(this, null, function* () {
      this.registerView(VIEW_TYPE_EXAMPLE, (leaf) => new ExampleView(leaf));
      this.addRibbonIcon("dice", "Activate view", () => {
        this.activateView();
        console.log("start");
      });
      this.addCommand({
        id: "exam",
        name: "exam",
        callback: () => __async(this, null, function* () {
          new chouti(this.app).open();
        })
      });
    });
  }
  onunload() {
    return __async(this, null, function* () {
    });
  }
  activateView() {
    return __async(this, null, function* () {
      let { workspace } = this.app;
      let leaf = null;
      let leaves = workspace.getLeavesOfType(VIEW_TYPE_EXAMPLE);
      if (leaves.length > 0) {
        leaf = leaves[0];
      } else {
        let leaf2 = workspace.getRightLeaf(false);
        yield leaf2.setViewState({ type: VIEW_TYPE_EXAMPLE, active: true });
      }
      workspace.revealLeaf(leaf);
    });
  }
};
var chouti = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "\u7EC4\u5377:" });
    new import_obsidian.Setting(contentEl).setName("\u79D1\u76EE").addText((text) => text.onChange((value) => {
      this.kemu = value;
    }));
    new import_obsidian.Setting(contentEl).setName("\u9898\u6570").addText((text) => text.onChange((value) => {
      this.tishu = value;
    }));
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Submit").setCta().onClick(() => {
      this.close();
      this.onSubmit(this.kemu);
    }));
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IEl0ZW1WaWV3LCBNYXJrZG93blJlbmRlcmVyLCBXb3Jrc3BhY2VMZWFmLCBBcHAsIE1vZGFsLCBTZXR0aW5nIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyBQbHVnaW4sRmlsZU1hbmFnZXJ9IGZyb20gXCJvYnNpZGlhblwiO1xuXG52YXIgYW5zd2VyID0gXCJOT05FXCJcbnZhciBmaWxlc1dpdGhUYWcgPSB0YWcoKTtcbnZhciBzZWxlY3RfdCA9IGdldFJhbmRvbUVsZW1lbnRzKGZpbGVzV2l0aFRhZywxKVxudmFyIHRpbXUgPSBzZWxlY3RfdFswXVxudmFyIGNsYXNfdCA9IFtdXG52YXIgc2VsZWN0X2NsYXNzID0gXCJcdTc1QzVcdTc1MUZcIlxudmFyIHNlbGVjdF9udW1iZXIgPSAzXG52YXIgZmxhZyA9IDBcblxuZnVuY3Rpb24gZ2V0UmFuZG9tRWxlbWVudHMoYXJyLG4pIHtcbiAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgbGV0IGxlbiA9IGFyci5sZW5ndGg7XG4gICAgbGV0IHRha2VuID0gbmV3IEFycmF5KGxlbik7XG4gICAgaWYgKG4gPiBsZW4pXG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiZ2V0UmFuZG9tRWxlbWVudHM6IG1vcmUgZWxlbWVudHMgdGFrZW4gdGhhbiBhdmFpbGFibGVcIik7XG4gICAgd2hpbGUgKG4tLSkge1xuICAgICAgICBsZXQgeCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGxlbik7XG4gICAgICAgIHJlc3VsdC5wdXNoKGFyclt4IGluIHRha2VuID8gdGFrZW5beF0gOiB4XSk7XG4gICAgICAgIHRha2VuW3hdID0gLS1sZW4gaW4gdGFrZW4gPyB0YWtlbltsZW5dIDogbGVuO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiB3ZWlnaHQoZmlsZWxpc3QpeyAvL1x1OEZENFx1NTZERVx1NUI4OVx1Njc0M1x1OTFDRFx1NjJCRFx1NTNENlx1NzY4NFx1N0QyMlx1NUYxNVx1NTAzQ1xuXHRsZXQgd2VpZ2h0X2xpc3QgPSBbXTtcblx0bGV0IHRvdGFsV2VpZ2h0ID0gMFxuXHRmb3IodmFyIGk9MDtpPGZpbGVsaXN0Lmxlbmd0aDtpKyspe1xuXHRcdGxldCB3ZWlfYSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGVsaXN0W2ldKS5mcm9udG1hdHRlci50aW1lcztcblx0XHRsZXQgd2VpX2IgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlbGlzdFtpXSkuZnJvbnRtYXR0ZXIubGluaztcblx0XHR0b3RhbFdlaWdodCA9IHRvdGFsV2VpZ2h0ICsgd2VpX2Ivd2VpX2Fcblx0XHR3ZWlnaHRfbGlzdC5wdXNoKHdlaV9iL3dlaV9hKVxuXHR9XG5cblx0bGV0IHJhbmRvbU51bSA9IE1hdGgucmFuZG9tKCkgKiB0b3RhbFdlaWdodDtcblx0bGV0IHdlaWdodFN1bSA9IDA7XG5cblx0Zm9yIChsZXQgaSA9IDA7IGkgPCB3ZWlnaHRfbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdHdlaWdodFN1bSArPSB3ZWlnaHRfbGlzdFtpXTtcblx0XHRpZiAocmFuZG9tTnVtIDw9IHdlaWdodFN1bSkge1xuXHRcdCAgcmV0dXJuIGk7XG5cdFx0fVxuXHQgIH1cbn1cblxuZnVuY3Rpb24gdGFnKCl7XG5cdGNvbnN0IHRhZ05hbWUgPSAnXHU5NTE5XHU5ODk4JzsgLy8gXHU0RjYwXHU2MzA3XHU1QjlBXHU3Njg0XHU2ODA3XHU3QjdFXG5cdGNvbnN0IG1hcmtkb3duRmlsZXMgPSB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7IC8vIFx1ODNCN1x1NTNENlx1NjI0MFx1NjcwOSBNYXJrZG93biBcdTY1ODdcdTRFRjZcblx0Y29uc3QgZmlsZXNXaXRoVGFnID0gW107XG5cblx0Zm9yIChsZXQgZmlsZSBvZiBtYXJrZG93bkZpbGVzKSB7XG5cdFx0Y29uc3QgY2FjaGUgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTsgLy8gXHU4M0I3XHU1M0Q2XHU2NTg3XHU0RUY2XHU3RjEzXHU1QjU4XG5cdFx0aWYgKGNhY2hlICYmIGNhY2hlLnRhZ3MpIHsgLy8gXHU2OEMwXHU2N0U1XHU2NTg3XHU0RUY2XHU2NjJGXHU1NDI2XHU2NzA5XHU2ODA3XHU3QjdFXG5cdFx0XHRmb3IgKGxldCB0YWcgb2YgY2FjaGUudGFncykge1xuXHRcdFx0XHRpZiAodGFnLnRhZy5pbmNsdWRlcyhgIyR7dGFnTmFtZX1gKSkgeyAvLyBcdTY4QzBcdTY3RTVcdTY4MDdcdTdCN0VcdTY2MkZcdTU0MjZcdTUzMDVcdTU0MkJcdTRGNjBcdTYzMDdcdTVCOUFcdTc2ODRcdTY4MDdcdTdCN0Vcblx0XHRcdFx0XHRmaWxlc1dpdGhUYWcucHVzaChmaWxlKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gZmlsZXNXaXRoVGFnXHRcbn1cblxuZnVuY3Rpb24gY2xhc3NpZnkoZmxpc3QsY2xhcyl7XG5cdGNsYXNfdCA9IFtdXG5cdGZsaXN0LmZvckVhY2gobm90ZSA9PiB7XG5cdFx0bGV0IHByb3BlcnRpZXMgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShub3RlKS5mcm9udG1hdHRlcjsgLy8gXHU4M0I3XHU1M0Q2XHU3QjE0XHU4QkIwXHU3Njg0XHU1MTQzXHU2NTcwXHU2MzZFXG5cdFx0aWYgKHByb3BlcnRpZXMgJiYgcHJvcGVydGllcy5jbGFzcyA9PT0gY2xhcykge1xuXHRcdFx0Ly8gXHU4RkQ5XHU5MUNDXHU2NjJGXHU2MjdFXHU1MjMwXHU0RTg2XHU0RTAwXHU0RTJBXHU3QjI2XHU1NDA4XHU2NzYxXHU0RUY2XHU3Njg0XHU3QjE0XHU4QkIwXHVGRjBDXHU0RjYwXHU1M0VGXHU0RUU1XHU2ODM5XHU2MzZFXHU5NzAwXHU4OTgxXHU4RkRCXHU4ODRDXHU2NENEXHU0RjVDXG5cdFx0XHQvL2NvbnNvbGUubG9nKG5vdGUuYmFzZW5hbWUpO1xuXHRcdFx0Y2xhc190LnB1c2gobm90ZSlcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gY2xhc190O1xufVxuXG5leHBvcnQgY29uc3QgVklFV19UWVBFX0VYQU1QTEUgPSBcImV4YW1wbGUtdmlld1wiO1xuXG5leHBvcnQgY2xhc3MgRXhhbXBsZVZpZXcgZXh0ZW5kcyBJdGVtVmlldyB7IC8vXHU2QjY0XHU1OTA0XHU0RTNBXHU1MjFCXHU1RUZBXHU0RTAwXHU0RTJBdmlld1xuICBjb25zdHJ1Y3RvcihsZWFmOiBXb3Jrc3BhY2VMZWFmKSB7XG4gICAgc3VwZXIobGVhZik7XG4gIH1cblxuICBnZXRWaWV3VHlwZSgpIHtcbiAgICByZXR1cm4gVklFV19UWVBFX0VYQU1QTEU7XG4gIH1cblxuICBnZXREaXNwbGF5VGV4dCgpIHtcbiAgICByZXR1cm4gXCJCcnVzaFRpXCI7XG4gIH1cblxuICBhc3luYyBvbk9wZW4oKSB7XG4gICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXJFbC5jaGlsZHJlblsxXTtcbiAgICBjb250YWluZXIuZW1wdHkoKTtcbiAgICBjb250YWluZXIuY3JlYXRlRWwoXCJoMVwiLCB7IHRleHQ6IFwid2p4XCIgfSk7XG5cblx0Ly8gXHU1MjFCXHU1RUZBXHU0RTAwXHU0RTJBXHU4RjkzXHU1MTY1XHU2ODQ2XHU1NDhDXHU0RTAwXHU0RTJBXHU2NjNFXHU3OTNBXHU1MzNBXHU1N0RGXG5cdGNvbnRhaW5lci5pbm5lckhUTUwgPSBgXG5cdDxoZWFkPlxuXHRcdDxzdHlsZT5cblx0XHRcdGJ1dHRvbiB7XG5cdFx0XHRcdGZvbnQtc2l6ZTogMTZweDtcblx0XHRcdFx0Ym9yZGVyOiBub25lO1xuXHRcdFx0XHRib3JkZXItcmFkaXVzOiA1cHg7XG5cdFx0XHRcdGNvbG9yOiB3aGl0ZTtcblx0XHRcdH1cblx0XHRcdCN0biB7XG5cdFx0XHRcdGJhY2tncm91bmQtY29sb3I6ICM0Q0FGNTA7XG5cdFx0XHR9XG5cdFx0XHQjZG4ge1xuXHRcdFx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAjMDA4Q0JBO1xuXHRcdFx0fVxuXHRcdFx0I3R6IHtcblx0XHRcdFx0YmFja2dyb3VuZC1jb2xvcjogI2Y0NDMzNjtcblx0XHRcdH1cblx0XHRcdCN0LCAjZiB7XG5cdFx0XHRcdGJhY2tncm91bmQtY29sb3I6ICM1NTU1NTU7XG5cdFx0XHR9XG5cdFx0XHQjbm90ZS1jb250ZW50IHtcblx0XHRcdFx0cGFkZGluZzogMTVweDtcblx0XHRcdFx0Y29sb3I6ICM4N0NFRUI7XG5cdFx0XHRcdGJvcmRlci1yYWRpdXM6IDVweDtcblx0XHRcdFx0Ym94LXNoYWRvdzogMCAycHggNXB4IHJnYmEoMCwwLDAsMC4zKTtcblx0XHRcdH1cblx0XHRcdCNub3RlLWFuc3dlciB7XG5cdFx0XHRcdHBhZGRpbmc6IDE1cHg7XG5cdFx0XHRcdGNvbG9yOiAjODdDRUVCO1xuXHRcdFx0XHRib3JkZXItcmFkaXVzOiA1cHg7XG5cdFx0XHRcdGJveC1zaGFkb3c6IDAgMnB4IDVweCByZ2JhKDAsMCwwLDAuMyk7XG5cdFx0XHR9XG5cdFx0XHQuYnV0dG9uLWNvbnRhaW5lciB7XG5cdFx0XHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0XHRcdGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2Vlbjtcblx0XHRcdFx0d2lkdGg6IDEwMCU7XG5cdFx0XHQgIH1cblx0XHQ8L3N0eWxlPlxuXHQ8L2hlYWQ+XG5cdDxib2R5PlxuXHRcdDxpbnB1dCB0eXBlPVwidGV4dFwiIGlkPVwiY2xhc3NcIj5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJudW1iZXJcIj5cblx0XHQ8YnV0dG9uIGlkPVwidG5cIj5cdTYyQkRcdTk4OTg8L2J1dHRvbj5cblx0XHQ8L2JyPlxuXHRcdDxici8+XG5cdFx0PHAgaWQ9XCJub3RlLWNvbnRlbnRcIj48L3A+XG5cdFx0PHAgaWQ9XCJub3RlLWFuc3dlclwiPjwvcD5cblx0XHQ8ZGl2IGNsYXNzPVwiYnV0dG9uLWNvbnRhaW5lclwiPlxuXHRcdDxidXR0b24gaWQ9XCJkZFwiPlx1MjcwNTwvYnV0dG9uPlxuXHRcdDxidXR0b24gaWQ9XCJkblwiPlx1N0I1NFx1Njg0ODwvYnV0dG9uPlxuXHRcdDxidXR0b24gaWQ9XCJ0elwiPlx1OERGM1x1OEY2QzwvYnV0dG9uPlxuXHRcdDxidXR0b24gaWQ9XCJjY1wiPlx1Mjc0QzwvYnV0dG9uPlxuXHQgIDwvZGl2PlxuXHRcdDxkaXYgaWQ9XCJtYXJrZG93bi1vdXRwdXRcIj48L2Rpdj5cblx0PC9ib2R5PlxuXHRcblx0YDtcblxuXHQvLyBcdTZERkJcdTUyQTBcdTRFOEJcdTRFRjZcdTc2RDFcdTU0MkNcdTU2NjhcdTY3NjVcdTU5MDRcdTc0MDZcdTYzMDlcdTk0QUVcdTcwQjlcdTUxRkJcblx0Ly8gY29uc3QgYnV0dG9uID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIjbG9hZC1ub3RlXCIpO1xuXHQvLyBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGFzeW5jICgpID0+IHtcblx0Ly8gXHRjb25zdCBub3RlTmFtZSA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiI25vdGUtcGF0aFwiKS52YWx1ZTtcblx0Ly8gXHRjb25zdCBub3RlID0gdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKG5vdGVOYW1lKTsvL1x1NkNFOFx1NjEwRlx1OTcwMFx1ODk4MVx1NjgzOVx1NjM2RVx1OERFRlx1NUY4NFx1Njc2NVx1NjI1M1x1NUYwMFx1N0IxNFx1OEJCMFxuXHQvLyBcdGNvbnN0IGNvbnRlbnQgPSB0aGlzLmFwcC52YXVsdC5yZWFkKG5vdGUpO1xuXHQvLyBcdC8vY29uc3QgbWFya2Rvd25SZW5kZXJlZCA9IGF3YWl0IHRoaXMuYXBwLm1hcmtkb3duUmVuZGVyZXIucmVuZGVyKGNvbnRlbnQpO1xuXHQvLyBcdC8vY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIjbWFya2Rvd24tb3V0cHV0XCIpLmlubmVySFRNTCA9IG1hcmtkb3duUmVuZGVyZWQ7XG5cblx0Ly8gXHR0aGlzLmFwcC52YXVsdC5yZWFkKG5vdGUpLnRoZW4oY29udGVudCA9PiB7XG5cdC8vIFx0XHRjb250YWluZXIucXVlcnlTZWxlY3RvcihcIiNub3RlLWNvbnRlbnRcIikudGV4dENvbnRlbnQgPSBjb250ZW50Oy8vXHU4RkQ5XHU2QkI1XHU0RUUzXHU3ODAxXHU1M0VGXHU0RUU1XHU4M0I3XHU1Rjk3XHU3QjE0XHU4QkIwXHU3Njg0XHU1MTg1XHU1QkI5XHU1NDBFXHVGRjBDXHU1QzA2XHU1MTc2XHU4RjkzXHU1MUZBXHU1MjMwbm90ZS1jb250ZW50XHU2ODQ2XHU0RTJEXG5cdC8vIFx0XHRjb25zb2xlLmxvZyhjb250ZW50KVxuXHQvLyBcdFx0dmFyIHRleHQgPSBjb250ZW50LnJlcGxhY2UoLyhcXG58XFxyfFxcclxcbnxcXHUyMWI1KS9nLCAnPGJyLz4nKTtcblx0Ly8gXHRcdGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiI25vdGUtY29udGVudFwiKS5pbm5lckhUTUwgPSB0ZXh0XG5cdC8vIFx0fSk7XG5cdC8vIFx0dGhpcy5hcHAud29ya3NwYWNlLm9wZW5MaW5rVGV4dChub3RlLmJhc2VuYW1lLCBub3RlLnBhdGgsIHRydWUpO1xuXHQvLyB9KTtcblxuXHRjb25zdCBidXR0b24yID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIjdG5cIik7XG5cdGJ1dHRvbjIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGFzeW5jICgpID0+IHtcblx0XHRzZWxlY3RfY2xhc3MgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcihcIiNjbGFzc1wiKS52YWx1ZTtcbiAgICAgICAgc2VsZWN0X251bWJlciA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiI251bWJlclwiKS52YWx1ZTtcblx0XHRmaWxlc1dpdGhUYWcgPSBjbGFzc2lmeSh0YWcoKSxzZWxlY3RfY2xhc3MpOyAvL1x1ODNCN1x1NUY5N1x1NjMwN1x1NUI5QVx1NzlEMVx1NzZFRVx1NzY4NFx1NjI0MFx1NjcwOVx1OTg5OFx1NzZFRVxuXHRcdC8vc2VsZWN0X3QgPSBnZXRSYW5kb21FbGVtZW50cyhmaWxlc1dpdGhUYWcsMSlcblxuXHRcdHRpbXUgPSBmaWxlc1dpdGhUYWdbd2VpZ2h0KGZpbGVzV2l0aFRhZyldXG4gICAgICAgIHRpbXUgPSB0aW11LnNsaWNlKDAsc2VsZWN0X251bWJlcik7XG5cbiAgICAgICAgZmxhZyA9IDBcblx0XHQvL3RpbXUgPSBzZWxlY3RfdFswXSAvL1x1NjgzOVx1NjM2RVx1Njc0M1x1OTFDRFx1OEZEQlx1ODg0Q1x1NjJCRFx1OTAwOVxuXG5cdFx0dmFyIGNvbnRlbnQgPSB0aGlzLmFwcC52YXVsdC5yZWFkKHRpbXUpLnRoZW4oY29udGVudCA9PiB7XG5cdFx0XHQvLyBcdTUwNDdcdThCQkUgbWFya2Rvd24gXHU2NjJGXHU0RjYwXHU3Njg0IE1hcmtkb3duIFx1NUI1N1x1N0IyNlx1NEUzMlxuXHRcdFx0bGV0IG1hcmtkb3duID0gY29udGVudDtcblx0XHRcdC8vIFx1NEY3Rlx1NzUyOFx1NkI2M1x1NTIxOVx1ODg2OFx1OEZCRVx1NUYwRlx1NTMzOVx1OTE0RCBhZC1xdWVzdGlvbiBcdTRFRTNcdTc4MDFcdTU3NTdcblx0XHRcdGxldCBtYXRjaCA9IG1hcmtkb3duLm1hdGNoKC9gYGBhZC1xdWVzdGlvbihbXmBdKylgYGAvKTtcblx0XHRcdGxldCBjb2RlQmxvY2sgPSBtYXRjaFsxXTtcblx0XHRcdC8vIFx1NTIwNlx1NTI3Mlx1NEVFM1x1NzgwMVx1NTc1N1x1NEUzQVx1ODg0Q1xuXHRcdFx0bGV0IGxpbmVzID0gY29kZUJsb2NrLnNwbGl0KCdcXG4nKTtcblx0XHRcdC8vIFx1NzlGQlx1OTY2NCBcInRpdGxlXCIgXHU4ODRDXG5cdFx0XHRsaW5lcyA9IGxpbmVzLmZpbHRlcihsaW5lID0+ICFsaW5lLnN0YXJ0c1dpdGgoJ3RpdGxlOicpKTtcblx0XHRcdC8vIFx1NTQwOFx1NUU3Nlx1NTI2OVx1NEY1OVx1NzY4NFx1ODg0Q1xuXHRcdFx0dmFyIHJlc3VsdCA9IGxpbmVzLmpvaW4oJ1xcbicpO1xuXHRcdFx0Ly9jb25zb2xlLmxvZyhyZXN1bHQpOyAvLyBcdThGOTNcdTUxRkFcdTdFRDNcdTY3OUNcblx0XHRcdHZhciB0ZXh0ID0gcmVzdWx0LnJlcGxhY2UoLyhcXG58XFxyfFxcclxcbnxcXHUyMWI1KS9nLCAnPGJyLz4nKTtcblx0XHRcdGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiI25vdGUtY29udGVudFwiKS5pbm5lckhUTUwgPSB0ZXh0XG5cdFx0fSk7XG5cdFx0Ly8gY29uc29sZS5sb2coc2VsZWN0X3RbMF0pXG5cdFx0dmFyIGFuc3dlID0gdGhpcy5hcHAudmF1bHQucmVhZCh0aW11KS50aGVuKGNvbnRlbnQgPT4ge1xuXHRcdFx0Ly8gXHU1MDQ3XHU4QkJFIG1hcmtkb3duIFx1NjYyRlx1NEY2MFx1NzY4NCBNYXJrZG93biBcdTVCNTdcdTdCMjZcdTRFMzJcblx0XHRcdGxldCBtYXJrZG93biA9IGNvbnRlbnQ7XG5cdFx0XHQvLyBcdTRGN0ZcdTc1MjhcdTZCNjNcdTUyMTlcdTg4NjhcdThGQkVcdTVGMEZcdTUzMzlcdTkxNEQgYWQtcXVlc3Rpb24gXHU0RUUzXHU3ODAxXHU1NzU3XG5cdFx0XHRsZXQgbWF0Y2ggPSBtYXJrZG93bi5tYXRjaCgvYGBgYWQtbm90ZShbXmBdKylgYGAvKTtcblx0XHRcdGxldCBjb2RlQmxvY2sgPSBtYXRjaFsxXTtcblx0XHRcdC8vIFx1NTIwNlx1NTI3Mlx1NEVFM1x1NzgwMVx1NTc1N1x1NEUzQVx1ODg0Q1xuXHRcdFx0bGV0IGxpbmVzID0gY29kZUJsb2NrLnNwbGl0KCdcXG4nKTtcblx0XHRcdC8vIFx1NzlGQlx1OTY2NCBcInRpdGxlXCIgXHU4ODRDXG5cdFx0XHRsaW5lcyA9IGxpbmVzLmZpbHRlcihsaW5lID0+ICFsaW5lLnN0YXJ0c1dpdGgoJ2NvbGxhcHNlOicpKTtcblx0XHRcdGxpbmVzID0gbGluZXMuZmlsdGVyKGxpbmUgPT4gIWxpbmUuc3RhcnRzV2l0aCgndGl0bGU6JykpO1xuXHRcdFx0Ly8gXHU1NDA4XHU1RTc2XHU1MjY5XHU0RjU5XHU3Njg0XHU4ODRDXG5cdFx0XHR2YXIgcmVzdWx0ID0gbGluZXMuam9pbignXFxuJyk7XG5cdFx0XHQvL2NvbnNvbGUubG9nKHJlc3VsdCk7IC8vIFx1OEY5M1x1NTFGQVx1N0VEM1x1Njc5Q1xuXHRcdFx0YW5zd2VyID0gcmVzdWx0LnJlcGxhY2UoLyhcXG58XFxyfFxcclxcbnxcXHUyMWI1KS9nLCAnPGJyLz4nKTtcblx0XHRcdC8vIGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiI25vdGUtY29udGVudFwiKS5pbm5lckhUTUwgPSB0ZXh0XG5cdFx0fSk7XG5cdFx0Y29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIjbm90ZS1hbnN3ZXJcIikuaW5uZXJIVE1MID0gXCJcIlxuXHR9KTtcblxuXHRjb25zdCBidXR0b24zID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIjZG5cIik7XG5cdGJ1dHRvbjMuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGFzeW5jICgpID0+IHtcblx0XHRjb250YWluZXIucXVlcnlTZWxlY3RvcihcIiNub3RlLWFuc3dlclwiKS5pbm5lckhUTUwgPSBhbnN3ZXJcblx0fSk7XG5cblx0Y29uc3QgYnV0dG9uNCA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiI3R6XCIpO1xuXHRidXR0b240LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBhc3luYyAoKSA9PiB7XG5cdFx0dGhpcy5hcHAud29ya3NwYWNlLm9wZW5MaW5rVGV4dCh0aW11LmJhc2VuYW1lLHRpbXUucGF0aCwgdHJ1ZSk7XG5cdH0pO1xuXG5cdGNvbnN0IGJ1dHRvbjUgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcihcIiNkZFwiKTtcblx0YnV0dG9uNS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYXN5bmMgKCkgPT4ge1xuXHRcdGxldCBjYWNoZSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKHRpbXUpXG5cdFx0bGV0IHdyb25nX3RpbWVzID0gY2FjaGUuZnJvbnRtYXR0ZXIubGlua1xuXHRcdGxldCBzdW1fdGltZXMgPSBjYWNoZS5mcm9udG1hdHRlci50aW1lc1xuXHRcdGNvbnNvbGUubG9nKHdyb25nX3RpbWVzKVxuXHRcdC8vY2FjaGUuZnJvbnRtYXR0ZXIudGltZXMgPSBTdHJpbmcoMilcblx0XHQvL3RpbXUudmF1bHQubW9kaWZ5KHRpbXUsY2FjaGUuZnJvbnRtYXR0ZXIpO1xuXHRcdC8vdGltdS5maWxlLnNhdmVGcm9udG1hdHRlcihjYWNoZS5mcm9udG1hdHRlcilcblx0XHR0aGlzLmFwcC5maWxlTWFuYWdlci5wcm9jZXNzRnJvbnRNYXR0ZXIodGltdSwgKGZyb250bWF0dGVyKSA9PiB7XG5cdFx0XHRmcm9udG1hdHRlci50aW1lcyA9IHN1bV90aW1lcysxOyAvLyBcdTRGRUVcdTY1MzlcdTUxNDNcdTY1NzBcdTYzNkVcblx0XHRcdHJldHVybiBmcm9udG1hdHRlcjtcblx0XHR9KTtcblx0XHRzZWxlY3RfY2xhc3MgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcihcIiNjbGFzc1wiKS52YWx1ZTtcblx0XHRmaWxlc1dpdGhUYWcgPSBjbGFzc2lmeSh0YWcoKSxzZWxlY3RfY2xhc3MpOyAvL1x1ODNCN1x1NUY5N1x1NjMwN1x1NUI5QVx1NzlEMVx1NzZFRVx1NzY4NFx1NjI0MFx1NjcwOVx1OTg5OFx1NzZFRVxuXHRcdC8vc2VsZWN0X3QgPSBnZXRSYW5kb21FbGVtZW50cyhmaWxlc1dpdGhUYWcsMSlcblxuXHRcdHRpbXUgPSBmaWxlc1dpdGhUYWdbd2VpZ2h0KGZpbGVzV2l0aFRhZyldXG5cblx0XHQvL3RpbXUgPSBzZWxlY3RfdFswXSAvL1x1NjgzOVx1NjM2RVx1Njc0M1x1OTFDRFx1OEZEQlx1ODg0Q1x1NjJCRFx1OTAwOVxuXG5cdFx0dmFyIGNvbnRlbnQgPSB0aGlzLmFwcC52YXVsdC5yZWFkKHRpbXUpLnRoZW4oY29udGVudCA9PiB7XG5cdFx0XHQvLyBcdTUwNDdcdThCQkUgbWFya2Rvd24gXHU2NjJGXHU0RjYwXHU3Njg0IE1hcmtkb3duIFx1NUI1N1x1N0IyNlx1NEUzMlxuXHRcdFx0bGV0IG1hcmtkb3duID0gY29udGVudDtcblx0XHRcdC8vIFx1NEY3Rlx1NzUyOFx1NkI2M1x1NTIxOVx1ODg2OFx1OEZCRVx1NUYwRlx1NTMzOVx1OTE0RCBhZC1xdWVzdGlvbiBcdTRFRTNcdTc4MDFcdTU3NTdcblx0XHRcdGxldCBtYXRjaCA9IG1hcmtkb3duLm1hdGNoKC9gYGBhZC1xdWVzdGlvbihbXmBdKylgYGAvKTtcblx0XHRcdGxldCBjb2RlQmxvY2sgPSBtYXRjaFsxXTtcblx0XHRcdC8vIFx1NTIwNlx1NTI3Mlx1NEVFM1x1NzgwMVx1NTc1N1x1NEUzQVx1ODg0Q1xuXHRcdFx0bGV0IGxpbmVzID0gY29kZUJsb2NrLnNwbGl0KCdcXG4nKTtcblx0XHRcdC8vIFx1NzlGQlx1OTY2NCBcInRpdGxlXCIgXHU4ODRDXG5cdFx0XHRsaW5lcyA9IGxpbmVzLmZpbHRlcihsaW5lID0+ICFsaW5lLnN0YXJ0c1dpdGgoJ3RpdGxlOicpKTtcblx0XHRcdC8vIFx1NTQwOFx1NUU3Nlx1NTI2OVx1NEY1OVx1NzY4NFx1ODg0Q1xuXHRcdFx0dmFyIHJlc3VsdCA9IGxpbmVzLmpvaW4oJ1xcbicpO1xuXHRcdFx0Ly9jb25zb2xlLmxvZyhyZXN1bHQpOyAvLyBcdThGOTNcdTUxRkFcdTdFRDNcdTY3OUNcblx0XHRcdHZhciB0ZXh0ID0gcmVzdWx0LnJlcGxhY2UoLyhcXG58XFxyfFxcclxcbnxcXHUyMWI1KS9nLCAnPGJyLz4nKTtcblx0XHRcdGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiI25vdGUtY29udGVudFwiKS5pbm5lckhUTUwgPSB0ZXh0XG5cdFx0fSk7XG5cdFx0Ly8gY29uc29sZS5sb2coc2VsZWN0X3RbMF0pXG5cdFx0dmFyIGFuc3dlID0gdGhpcy5hcHAudmF1bHQucmVhZCh0aW11KS50aGVuKGNvbnRlbnQgPT4ge1xuXHRcdFx0Ly8gXHU1MDQ3XHU4QkJFIG1hcmtkb3duIFx1NjYyRlx1NEY2MFx1NzY4NCBNYXJrZG93biBcdTVCNTdcdTdCMjZcdTRFMzJcblx0XHRcdGxldCBtYXJrZG93biA9IGNvbnRlbnQ7XG5cdFx0XHQvLyBcdTRGN0ZcdTc1MjhcdTZCNjNcdTUyMTlcdTg4NjhcdThGQkVcdTVGMEZcdTUzMzlcdTkxNEQgYWQtcXVlc3Rpb24gXHU0RUUzXHU3ODAxXHU1NzU3XG5cdFx0XHRsZXQgbWF0Y2ggPSBtYXJrZG93bi5tYXRjaCgvYGBgYWQtbm90ZShbXmBdKylgYGAvKTtcblx0XHRcdGxldCBjb2RlQmxvY2sgPSBtYXRjaFsxXTtcblx0XHRcdC8vIFx1NTIwNlx1NTI3Mlx1NEVFM1x1NzgwMVx1NTc1N1x1NEUzQVx1ODg0Q1xuXHRcdFx0bGV0IGxpbmVzID0gY29kZUJsb2NrLnNwbGl0KCdcXG4nKTtcblx0XHRcdC8vIFx1NzlGQlx1OTY2NCBcInRpdGxlXCIgXHU4ODRDXG5cdFx0XHRsaW5lcyA9IGxpbmVzLmZpbHRlcihsaW5lID0+ICFsaW5lLnN0YXJ0c1dpdGgoJ2NvbGxhcHNlOicpKTtcblx0XHRcdGxpbmVzID0gbGluZXMuZmlsdGVyKGxpbmUgPT4gIWxpbmUuc3RhcnRzV2l0aCgndGl0bGU6JykpO1xuXHRcdFx0Ly8gXHU1NDA4XHU1RTc2XHU1MjY5XHU0RjU5XHU3Njg0XHU4ODRDXG5cdFx0XHR2YXIgcmVzdWx0ID0gbGluZXMuam9pbignXFxuJyk7XG5cdFx0XHQvL2NvbnNvbGUubG9nKHJlc3VsdCk7IC8vIFx1OEY5M1x1NTFGQVx1N0VEM1x1Njc5Q1xuXHRcdFx0YW5zd2VyID0gcmVzdWx0LnJlcGxhY2UoLyhcXG58XFxyfFxcclxcbnxcXHUyMWI1KS9nLCAnPGJyLz4nKTtcblx0XHRcdC8vIGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiI25vdGUtY29udGVudFwiKS5pbm5lckhUTUwgPSB0ZXh0XG5cdFx0fSk7XG5cdFx0Y29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIjbm90ZS1hbnN3ZXJcIikuaW5uZXJIVE1MID0gXCJcIlxuXHR9KTtcblxuXHRjb25zdCBidXR0b242ID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIjY2NcIik7XG5cdGJ1dHRvbjYuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGFzeW5jICgpID0+IHtcblx0XHRsZXQgY2FjaGUgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZSh0aW11KVxuXHRcdGxldCB3cm9uZ190aW1lcyA9IGNhY2hlLmZyb250bWF0dGVyLmxpbmtcblx0XHRsZXQgc3VtX3RpbWVzID0gY2FjaGUuZnJvbnRtYXR0ZXIudGltZXNcblx0XHRjb25zb2xlLmxvZyh3cm9uZ190aW1lcylcblx0XHQvL2NhY2hlLmZyb250bWF0dGVyLnRpbWVzID0gU3RyaW5nKDIpXG5cdFx0Ly90aW11LnZhdWx0Lm1vZGlmeSh0aW11LGNhY2hlLmZyb250bWF0dGVyKTtcblx0XHQvL3RpbXUuZmlsZS5zYXZlRnJvbnRtYXR0ZXIoY2FjaGUuZnJvbnRtYXR0ZXIpXG5cdFx0dGhpcy5hcHAuZmlsZU1hbmFnZXIucHJvY2Vzc0Zyb250TWF0dGVyKHRpbXUsIChmcm9udG1hdHRlcikgPT4geyAvLyBcdTRGRUVcdTY1MzlcdTUxNDNcdTY1NzBcdTYzNkVcblx0XHRcdGZyb250bWF0dGVyLmxpbmsgPSB3cm9uZ190aW1lcysxO1xuXHRcdFx0cmV0dXJuIGZyb250bWF0dGVyO1xuXHRcdH0pO1xuXHRcdHNlbGVjdF9jbGFzcyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiI2NsYXNzXCIpLnZhbHVlO1xuXHRcdGZpbGVzV2l0aFRhZyA9IGNsYXNzaWZ5KHRhZygpLHNlbGVjdF9jbGFzcyk7IC8vXHU4M0I3XHU1Rjk3XHU2MzA3XHU1QjlBXHU3OUQxXHU3NkVFXHU3Njg0XHU2MjQwXHU2NzA5XHU5ODk4XHU3NkVFXG5cdFx0Ly9zZWxlY3RfdCA9IGdldFJhbmRvbUVsZW1lbnRzKGZpbGVzV2l0aFRhZywxKVxuXG5cdFx0dGltdSA9IGZpbGVzV2l0aFRhZ1t3ZWlnaHQoZmlsZXNXaXRoVGFnKV1cblxuXHRcdC8vdGltdSA9IHNlbGVjdF90WzBdIC8vXHU2ODM5XHU2MzZFXHU2NzQzXHU5MUNEXHU4RkRCXHU4ODRDXHU2MkJEXHU5MDA5XG5cblx0XHR2YXIgY29udGVudCA9IHRoaXMuYXBwLnZhdWx0LnJlYWQodGltdSkudGhlbihjb250ZW50ID0+IHtcblx0XHRcdC8vIFx1NTA0N1x1OEJCRSBtYXJrZG93biBcdTY2MkZcdTRGNjBcdTc2ODQgTWFya2Rvd24gXHU1QjU3XHU3QjI2XHU0RTMyXG5cdFx0XHRsZXQgbWFya2Rvd24gPSBjb250ZW50O1xuXHRcdFx0Ly8gXHU0RjdGXHU3NTI4XHU2QjYzXHU1MjE5XHU4ODY4XHU4RkJFXHU1RjBGXHU1MzM5XHU5MTREIGFkLXF1ZXN0aW9uIFx1NEVFM1x1NzgwMVx1NTc1N1xuXHRcdFx0bGV0IG1hdGNoID0gbWFya2Rvd24ubWF0Y2goL2BgYGFkLXF1ZXN0aW9uKFteYF0rKWBgYC8pO1xuXHRcdFx0bGV0IGNvZGVCbG9jayA9IG1hdGNoWzFdO1xuXHRcdFx0Ly8gXHU1MjA2XHU1MjcyXHU0RUUzXHU3ODAxXHU1NzU3XHU0RTNBXHU4ODRDXG5cdFx0XHRsZXQgbGluZXMgPSBjb2RlQmxvY2suc3BsaXQoJ1xcbicpO1xuXHRcdFx0Ly8gXHU3OUZCXHU5NjY0IFwidGl0bGVcIiBcdTg4NENcblx0XHRcdGxpbmVzID0gbGluZXMuZmlsdGVyKGxpbmUgPT4gIWxpbmUuc3RhcnRzV2l0aCgndGl0bGU6JykpO1xuXHRcdFx0Ly8gXHU1NDA4XHU1RTc2XHU1MjY5XHU0RjU5XHU3Njg0XHU4ODRDXG5cdFx0XHR2YXIgcmVzdWx0ID0gbGluZXMuam9pbignXFxuJyk7XG5cdFx0XHQvL2NvbnNvbGUubG9nKHJlc3VsdCk7IC8vIFx1OEY5M1x1NTFGQVx1N0VEM1x1Njc5Q1xuXHRcdFx0dmFyIHRleHQgPSByZXN1bHQucmVwbGFjZSgvKFxcbnxcXHJ8XFxyXFxufFxcdTIxYjUpL2csICc8YnIvPicpO1xuXHRcdFx0Y29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIjbm90ZS1jb250ZW50XCIpLmlubmVySFRNTCA9IHRleHRcblx0XHR9KTtcblx0XHQvLyBjb25zb2xlLmxvZyhzZWxlY3RfdFswXSlcblx0XHR2YXIgYW5zd2UgPSB0aGlzLmFwcC52YXVsdC5yZWFkKHRpbXUpLnRoZW4oY29udGVudCA9PiB7XG5cdFx0XHQvLyBcdTUwNDdcdThCQkUgbWFya2Rvd24gXHU2NjJGXHU0RjYwXHU3Njg0IE1hcmtkb3duIFx1NUI1N1x1N0IyNlx1NEUzMlxuXHRcdFx0bGV0IG1hcmtkb3duID0gY29udGVudDtcblx0XHRcdC8vIFx1NEY3Rlx1NzUyOFx1NkI2M1x1NTIxOVx1ODg2OFx1OEZCRVx1NUYwRlx1NTMzOVx1OTE0RCBhZC1xdWVzdGlvbiBcdTRFRTNcdTc4MDFcdTU3NTdcblx0XHRcdGxldCBtYXRjaCA9IG1hcmtkb3duLm1hdGNoKC9gYGBhZC1ub3RlKFteYF0rKWBgYC8pO1xuXHRcdFx0bGV0IGNvZGVCbG9jayA9IG1hdGNoWzFdO1xuXHRcdFx0Ly8gXHU1MjA2XHU1MjcyXHU0RUUzXHU3ODAxXHU1NzU3XHU0RTNBXHU4ODRDXG5cdFx0XHRsZXQgbGluZXMgPSBjb2RlQmxvY2suc3BsaXQoJ1xcbicpO1xuXHRcdFx0Ly8gXHU3OUZCXHU5NjY0IFwidGl0bGVcIiBcdTg4NENcblx0XHRcdGxpbmVzID0gbGluZXMuZmlsdGVyKGxpbmUgPT4gIWxpbmUuc3RhcnRzV2l0aCgnY29sbGFwc2U6JykpO1xuXHRcdFx0bGluZXMgPSBsaW5lcy5maWx0ZXIobGluZSA9PiAhbGluZS5zdGFydHNXaXRoKCd0aXRsZTonKSk7XG5cdFx0XHQvLyBcdTU0MDhcdTVFNzZcdTUyNjlcdTRGNTlcdTc2ODRcdTg4NENcblx0XHRcdHZhciByZXN1bHQgPSBsaW5lcy5qb2luKCdcXG4nKTtcblx0XHRcdC8vY29uc29sZS5sb2cocmVzdWx0KTsgLy8gXHU4RjkzXHU1MUZBXHU3RUQzXHU2NzlDXG5cdFx0XHRhbnN3ZXIgPSByZXN1bHQucmVwbGFjZSgvKFxcbnxcXHJ8XFxyXFxufFxcdTIxYjUpL2csICc8YnIvPicpO1xuXHRcdFx0Ly8gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIjbm90ZS1jb250ZW50XCIpLmlubmVySFRNTCA9IHRleHRcblx0XHR9KTtcblx0XHRjb250YWluZXIucXVlcnlTZWxlY3RvcihcIiNub3RlLWFuc3dlclwiKS5pbm5lckhUTUwgPSBcIlwiXG5cdH0pO1xuICB9XG5cbiAgYXN5bmMgb25DbG9zZSgpIHtcbiAgICAvLyBOb3RoaW5nIHRvIGNsZWFuIHVwLlxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV4YW1wbGVQbHVnaW4gZXh0ZW5kcyBQbHVnaW4geyAvL1x1NkI2NFx1NTkwNFx1NEUzQVx1NTQyRlx1NTJBOFx1OEJCRVx1N0Y2RVxuICBhc3luYyBvbmxvYWQoKSB7XG5cdC8vdGhpcy5hcHAuZW11bGF0ZU1vYmlsZShmYWxzZSk7XG4gICAgdGhpcy5yZWdpc3RlclZpZXcoLy9cdTZDRThcdTUxOENcdTg5QzZcdTU2RkVcbiAgICAgIFZJRVdfVFlQRV9FWEFNUExFLFxuICAgICAgKGxlYWYpID0+IG5ldyBFeGFtcGxlVmlldyhsZWFmKVxuICAgICk7XG5cbiAgICB0aGlzLmFkZFJpYmJvbkljb24oXCJkaWNlXCIsIFwiQWN0aXZhdGUgdmlld1wiLCAoKSA9PiB7XG4gICAgICB0aGlzLmFjdGl2YXRlVmlldygpO1xuXHQgIGNvbnNvbGUubG9nKFwic3RhcnRcIilcblxuXHQvLyAgIHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWFmKCkuc2V0Vmlld1N0YXRlKHtcblx0Ly8gXHR0eXBlOiBWSUVXX1RZUEVfRVhBTVBMRSxcblx0Ly8gXHRhY3RpdmU6IHRydWUsXG5cdC8vICAgfSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgICBpZDogJ2V4YW0nLFxuICAgICAgICBuYW1lOiAnZXhhbScsXG4gICAgICAgIGNhbGxiYWNrOiBhc3luYygpID0+IHtcbiAgICAgICAgICAgIG5ldyBjaG91dGkodGhpcy5hcHApLm9wZW4oKTtcbiAgICAgICAgfVxuICAgICAgICB9KVxuXG4gIH1cblxuICBhc3luYyBvbnVubG9hZCgpIHtcbiAgfVxuXG4gIGFzeW5jIGFjdGl2YXRlVmlldygpIHtcblx0bGV0IHsgd29ya3NwYWNlIH0gID0gdGhpcy5hcHA7XG5cblx0bGV0IGxlYWY6IFdvcmtzcGFjZUxlYWYgfCBudWxsID0gbnVsbDtcblx0bGV0IGxlYXZlcyA9IHdvcmtzcGFjZS5nZXRMZWF2ZXNPZlR5cGUoVklFV19UWVBFX0VYQU1QTEUpO1xuXG5cdGlmIChsZWF2ZXMubGVuZ3RoID4gMCkge1xuXHRcdC8vIEEgbGVhZiB3aXRoIG91ciB2aWV3IGFscmVhZHkgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGxlYWYgPSBsZWF2ZXNbMF07XG5cdH0gZWxzZSB7XG5cdFx0Ly8gT3VyIHZpZXcgY291bGQgbm90IGJlIGZvdW5kIGluIHRoZSB3b3Jrc3BhY2UsIGNyZWF0ZSBhIG5ldyBsZWFmXG5cdFx0Ly8gaW4gdGhlIHJpZ2h0IHNpZGViYXIgZm9yIGl0XG5cdFx0bGV0IGxlYWYgPSB3b3Jrc3BhY2UuZ2V0UmlnaHRMZWFmKGZhbHNlKTtcblx0XHRhd2FpdCBsZWFmLnNldFZpZXdTdGF0ZSh7IHR5cGU6IFZJRVdfVFlQRV9FWEFNUExFLCBhY3RpdmU6IHRydWUgfSk7XG5cdH1cblxuXHQvLyBcIlJldmVhbFwiIHRoZSBsZWFmIGluIGNhc2UgaXQgaXMgaW4gYSBjb2xsYXBzZWQgc2lkZWJhclxuICAgIHdvcmtzcGFjZS5yZXZlYWxMZWFmKGxlYWYpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBjaG91dGkgZXh0ZW5kcyBNb2RhbCB7XG4gICAga2VtdTogc3RyaW5nO1xuICAgIHRpc2h1OiBzdHJpbmc7XG4gICAgb25TdWJtaXQ6IChyZXN1bHQ6IHN0cmluZykgPT4gdm9pZDtcbiAgXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIG9uU3VibWl0OiAocmVzdWx0OiBzdHJpbmcpID0+IHZvaWQpIHtcbiAgICAgIHN1cGVyKGFwcCk7XG4gICAgICB0aGlzLm9uU3VibWl0ID0gb25TdWJtaXQ7XG4gICAgfVxuICBcbiAgICBvbk9wZW4oKSB7XG4gICAgICBjb25zdCB7Y29udGVudEVsfSAgPSB0aGlzO1xuICBcbiAgICAgIGNvbnRlbnRFbC5jcmVhdGVFbChcImgxXCIsIHsgdGV4dDogXCJcdTdFQzRcdTUzNzc6XCIgfSk7XG5cbiAgICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcbiAgICAgIC5zZXROYW1lKFwiXHU3OUQxXHU3NkVFXCIpXG4gICAgICAuYWRkVGV4dCgodGV4dCkgPT5cbiAgICAgICAgdGV4dC5vbkNoYW5nZSgodmFsdWUpID0+IHtcbiAgICAgICAgICB0aGlzLmtlbXUgPSB2YWx1ZVxuICAgICAgICB9KSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxuICAgICAgICAuc2V0TmFtZShcIlx1OTg5OFx1NjU3MFwiKVxuICAgICAgICAuYWRkVGV4dCgodGV4dCkgPT5cbiAgICAgICAgICB0ZXh0Lm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy50aXNodSA9IHZhbHVlXG4gICAgICAgICAgfSkpO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcbiAgICAgICAgLmFkZEJ1dHRvbigoYnRuKSA9PlxuICAgICAgICBidG5cbiAgICAgICAgICAgIC5zZXRCdXR0b25UZXh0KFwiU3VibWl0XCIpXG4gICAgICAgICAgICAuc2V0Q3RhKClcbiAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgIHRoaXMub25TdWJtaXQodGhpcy5rZW11KTtcbiAgICAgICAgICAgIH0pKTtcbiAgICBcblxuICAgIH1cbiAgXG4gICAgb25DbG9zZSgpIHtcbiAgICAgIGxldCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcbiAgICAgIGNvbnRlbnRFbC5lbXB0eSgpO1xuICAgIH1cbiAgfSJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBK0U7QUFDL0UsdUJBQWtDO0FBRWxDLElBQUksU0FBUztBQUNiLElBQUksZUFBZTtBQUNuQixJQUFJLFdBQVcsa0JBQWtCLGNBQWE7QUFDOUMsSUFBSSxPQUFPLFNBQVM7QUFDcEIsSUFBSSxTQUFTO0FBQ2IsSUFBSSxlQUFlO0FBQ25CLElBQUksZ0JBQWdCO0FBQ3BCLElBQUksT0FBTztBQUVYLDJCQUEyQixLQUFJLEdBQUc7QUFDOUIsTUFBSSxTQUFTO0FBQ2IsTUFBSSxNQUFNLElBQUk7QUFDZCxNQUFJLFFBQVEsSUFBSSxNQUFNO0FBQ3RCLE1BQUksSUFBSTtBQUNKLFVBQU0sSUFBSSxXQUFXO0FBQ3pCLFNBQU8sS0FBSztBQUNSLFFBQUksSUFBSSxLQUFLLE1BQU0sS0FBSyxXQUFXO0FBQ25DLFdBQU8sS0FBSyxJQUFJLEtBQUssUUFBUSxNQUFNLEtBQUs7QUFDeEMsVUFBTSxLQUFLLEVBQUUsT0FBTyxRQUFRLE1BQU0sT0FBTztBQUFBO0FBRTdDLFNBQU87QUFBQTtBQUdYLGdCQUFnQixVQUFTO0FBQ3hCLE1BQUksY0FBYztBQUNsQixNQUFJLGNBQWM7QUFDbEIsV0FBUSxJQUFFLEdBQUUsSUFBRSxTQUFTLFFBQU8sS0FBSTtBQUNqQyxRQUFJLFFBQVEsS0FBSyxJQUFJLGNBQWMsYUFBYSxTQUFTLElBQUksWUFBWTtBQUN6RSxRQUFJLFFBQVEsS0FBSyxJQUFJLGNBQWMsYUFBYSxTQUFTLElBQUksWUFBWTtBQUN6RSxrQkFBYyxjQUFjLFFBQU07QUFDbEMsZ0JBQVksS0FBSyxRQUFNO0FBQUE7QUFHeEIsTUFBSSxZQUFZLEtBQUssV0FBVztBQUNoQyxNQUFJLFlBQVk7QUFFaEIsV0FBUyxLQUFJLEdBQUcsS0FBSSxZQUFZLFFBQVEsTUFBSztBQUM1QyxpQkFBYSxZQUFZO0FBQ3pCLFFBQUksYUFBYSxXQUFXO0FBQzFCLGFBQU87QUFBQTtBQUFBO0FBQUE7QUFLWCxlQUFjO0FBQ2IsUUFBTSxVQUFVO0FBQ2hCLFFBQU0sZ0JBQWdCLEtBQUssSUFBSSxNQUFNO0FBQ3JDLFFBQU0sZ0JBQWU7QUFFckIsV0FBUyxRQUFRLGVBQWU7QUFDL0IsVUFBTSxRQUFRLEtBQUssSUFBSSxjQUFjLGFBQWE7QUFDbEQsUUFBSSxTQUFTLE1BQU0sTUFBTTtBQUN4QixlQUFTLFFBQU8sTUFBTSxNQUFNO0FBQzNCLFlBQUksS0FBSSxJQUFJLFNBQVMsSUFBSSxZQUFZO0FBQ3BDLHdCQUFhLEtBQUs7QUFDbEI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUtKLFNBQU87QUFBQTtBQUdSLGtCQUFrQixPQUFNLE1BQUs7QUFDNUIsV0FBUztBQUNULFFBQU0sUUFBUSxVQUFRO0FBQ3JCLFFBQUksYUFBYSxLQUFLLElBQUksY0FBYyxhQUFhLE1BQU07QUFDM0QsUUFBSSxjQUFjLFdBQVcsVUFBVSxNQUFNO0FBRzVDLGFBQU8sS0FBSztBQUFBO0FBQUE7QUFHZCxTQUFPO0FBQUE7QUFHRCxJQUFNLG9CQUFvQjtBQUUxQixnQ0FBMEIseUJBQVM7QUFBQSxFQUN4QyxZQUFZLE1BQXFCO0FBQy9CLFVBQU07QUFBQTtBQUFBLEVBR1IsY0FBYztBQUNaLFdBQU87QUFBQTtBQUFBLEVBR1QsaUJBQWlCO0FBQ2YsV0FBTztBQUFBO0FBQUEsRUFHSCxTQUFTO0FBQUE7QUFDYixZQUFNLFlBQVksS0FBSyxZQUFZLFNBQVM7QUFDNUMsZ0JBQVU7QUFDVixnQkFBVSxTQUFTLE1BQU0sRUFBRSxNQUFNO0FBR3BDLGdCQUFVLFlBQVk7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUE2RXRCLFlBQU0sVUFBVSxVQUFVLGNBQWM7QUFDeEMsY0FBUSxpQkFBaUIsU0FBUyxNQUFZO0FBQzdDLHVCQUFlLFVBQVUsY0FBYyxVQUFVO0FBQzNDLHdCQUFnQixVQUFVLGNBQWMsV0FBVztBQUN6RCx1QkFBZSxTQUFTLE9BQU07QUFHOUIsZUFBTyxhQUFhLE9BQU87QUFDckIsZUFBTyxLQUFLLE1BQU0sR0FBRTtBQUVwQixlQUFPO0FBR2IsWUFBSSxVQUFVLEtBQUssSUFBSSxNQUFNLEtBQUssTUFBTSxLQUFLLGNBQVc7QUFFdkQsY0FBSSxXQUFXO0FBRWYsY0FBSSxRQUFRLFNBQVMsTUFBTTtBQUMzQixjQUFJLFlBQVksTUFBTTtBQUV0QixjQUFJLFFBQVEsVUFBVSxNQUFNO0FBRTVCLGtCQUFRLE1BQU0sT0FBTyxVQUFRLENBQUMsS0FBSyxXQUFXO0FBRTlDLGNBQUksU0FBUyxNQUFNLEtBQUs7QUFFeEIsY0FBSSxPQUFPLE9BQU8sUUFBUSx3QkFBd0I7QUFDbEQsb0JBQVUsY0FBYyxpQkFBaUIsWUFBWTtBQUFBO0FBR3RELFlBQUksUUFBUSxLQUFLLElBQUksTUFBTSxLQUFLLE1BQU0sS0FBSyxjQUFXO0FBRXJELGNBQUksV0FBVztBQUVmLGNBQUksUUFBUSxTQUFTLE1BQU07QUFDM0IsY0FBSSxZQUFZLE1BQU07QUFFdEIsY0FBSSxRQUFRLFVBQVUsTUFBTTtBQUU1QixrQkFBUSxNQUFNLE9BQU8sVUFBUSxDQUFDLEtBQUssV0FBVztBQUM5QyxrQkFBUSxNQUFNLE9BQU8sVUFBUSxDQUFDLEtBQUssV0FBVztBQUU5QyxjQUFJLFNBQVMsTUFBTSxLQUFLO0FBRXhCLG1CQUFTLE9BQU8sUUFBUSx3QkFBd0I7QUFBQTtBQUdqRCxrQkFBVSxjQUFjLGdCQUFnQixZQUFZO0FBQUE7QUFHckQsWUFBTSxVQUFVLFVBQVUsY0FBYztBQUN4QyxjQUFRLGlCQUFpQixTQUFTLE1BQVk7QUFDN0Msa0JBQVUsY0FBYyxnQkFBZ0IsWUFBWTtBQUFBO0FBR3JELFlBQU0sVUFBVSxVQUFVLGNBQWM7QUFDeEMsY0FBUSxpQkFBaUIsU0FBUyxNQUFZO0FBQzdDLGFBQUssSUFBSSxVQUFVLGFBQWEsS0FBSyxVQUFTLEtBQUssTUFBTTtBQUFBO0FBRzFELFlBQU0sVUFBVSxVQUFVLGNBQWM7QUFDeEMsY0FBUSxpQkFBaUIsU0FBUyxNQUFZO0FBQzdDLFlBQUksUUFBUSxLQUFLLElBQUksY0FBYyxhQUFhO0FBQ2hELFlBQUksY0FBYyxNQUFNLFlBQVk7QUFDcEMsWUFBSSxZQUFZLE1BQU0sWUFBWTtBQUNsQyxnQkFBUSxJQUFJO0FBSVosYUFBSyxJQUFJLFlBQVksbUJBQW1CLE1BQU0sQ0FBQyxnQkFBZ0I7QUFDOUQsc0JBQVksUUFBUSxZQUFVO0FBQzlCLGlCQUFPO0FBQUE7QUFFUix1QkFBZSxVQUFVLGNBQWMsVUFBVTtBQUNqRCx1QkFBZSxTQUFTLE9BQU07QUFHOUIsZUFBTyxhQUFhLE9BQU87QUFJM0IsWUFBSSxVQUFVLEtBQUssSUFBSSxNQUFNLEtBQUssTUFBTSxLQUFLLGNBQVc7QUFFdkQsY0FBSSxXQUFXO0FBRWYsY0FBSSxRQUFRLFNBQVMsTUFBTTtBQUMzQixjQUFJLFlBQVksTUFBTTtBQUV0QixjQUFJLFFBQVEsVUFBVSxNQUFNO0FBRTVCLGtCQUFRLE1BQU0sT0FBTyxVQUFRLENBQUMsS0FBSyxXQUFXO0FBRTlDLGNBQUksU0FBUyxNQUFNLEtBQUs7QUFFeEIsY0FBSSxPQUFPLE9BQU8sUUFBUSx3QkFBd0I7QUFDbEQsb0JBQVUsY0FBYyxpQkFBaUIsWUFBWTtBQUFBO0FBR3RELFlBQUksUUFBUSxLQUFLLElBQUksTUFBTSxLQUFLLE1BQU0sS0FBSyxjQUFXO0FBRXJELGNBQUksV0FBVztBQUVmLGNBQUksUUFBUSxTQUFTLE1BQU07QUFDM0IsY0FBSSxZQUFZLE1BQU07QUFFdEIsY0FBSSxRQUFRLFVBQVUsTUFBTTtBQUU1QixrQkFBUSxNQUFNLE9BQU8sVUFBUSxDQUFDLEtBQUssV0FBVztBQUM5QyxrQkFBUSxNQUFNLE9BQU8sVUFBUSxDQUFDLEtBQUssV0FBVztBQUU5QyxjQUFJLFNBQVMsTUFBTSxLQUFLO0FBRXhCLG1CQUFTLE9BQU8sUUFBUSx3QkFBd0I7QUFBQTtBQUdqRCxrQkFBVSxjQUFjLGdCQUFnQixZQUFZO0FBQUE7QUFHckQsWUFBTSxVQUFVLFVBQVUsY0FBYztBQUN4QyxjQUFRLGlCQUFpQixTQUFTLE1BQVk7QUFDN0MsWUFBSSxRQUFRLEtBQUssSUFBSSxjQUFjLGFBQWE7QUFDaEQsWUFBSSxjQUFjLE1BQU0sWUFBWTtBQUNwQyxZQUFJLFlBQVksTUFBTSxZQUFZO0FBQ2xDLGdCQUFRLElBQUk7QUFJWixhQUFLLElBQUksWUFBWSxtQkFBbUIsTUFBTSxDQUFDLGdCQUFnQjtBQUM5RCxzQkFBWSxPQUFPLGNBQVk7QUFDL0IsaUJBQU87QUFBQTtBQUVSLHVCQUFlLFVBQVUsY0FBYyxVQUFVO0FBQ2pELHVCQUFlLFNBQVMsT0FBTTtBQUc5QixlQUFPLGFBQWEsT0FBTztBQUkzQixZQUFJLFVBQVUsS0FBSyxJQUFJLE1BQU0sS0FBSyxNQUFNLEtBQUssY0FBVztBQUV2RCxjQUFJLFdBQVc7QUFFZixjQUFJLFFBQVEsU0FBUyxNQUFNO0FBQzNCLGNBQUksWUFBWSxNQUFNO0FBRXRCLGNBQUksUUFBUSxVQUFVLE1BQU07QUFFNUIsa0JBQVEsTUFBTSxPQUFPLFVBQVEsQ0FBQyxLQUFLLFdBQVc7QUFFOUMsY0FBSSxTQUFTLE1BQU0sS0FBSztBQUV4QixjQUFJLE9BQU8sT0FBTyxRQUFRLHdCQUF3QjtBQUNsRCxvQkFBVSxjQUFjLGlCQUFpQixZQUFZO0FBQUE7QUFHdEQsWUFBSSxRQUFRLEtBQUssSUFBSSxNQUFNLEtBQUssTUFBTSxLQUFLLGNBQVc7QUFFckQsY0FBSSxXQUFXO0FBRWYsY0FBSSxRQUFRLFNBQVMsTUFBTTtBQUMzQixjQUFJLFlBQVksTUFBTTtBQUV0QixjQUFJLFFBQVEsVUFBVSxNQUFNO0FBRTVCLGtCQUFRLE1BQU0sT0FBTyxVQUFRLENBQUMsS0FBSyxXQUFXO0FBQzlDLGtCQUFRLE1BQU0sT0FBTyxVQUFRLENBQUMsS0FBSyxXQUFXO0FBRTlDLGNBQUksU0FBUyxNQUFNLEtBQUs7QUFFeEIsbUJBQVMsT0FBTyxRQUFRLHdCQUF3QjtBQUFBO0FBR2pELGtCQUFVLGNBQWMsZ0JBQWdCLFlBQVk7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUk5QyxVQUFVO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFLbEIsa0NBQTJDLHdCQUFPO0FBQUEsRUFDMUMsU0FBUztBQUFBO0FBRWIsV0FBSyxhQUNILG1CQUNBLENBQUMsU0FBUyxJQUFJLFlBQVk7QUFHNUIsV0FBSyxjQUFjLFFBQVEsaUJBQWlCLE1BQU07QUFDaEQsYUFBSztBQUNSLGdCQUFRLElBQUk7QUFBQTtBQVFYLFdBQUssV0FBVztBQUFBLFFBQ1osSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sVUFBVSxNQUFXO0FBQ2pCLGNBQUksT0FBTyxLQUFLLEtBQUs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTXpCLFdBQVc7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUdYLGVBQWU7QUFBQTtBQUN0QixVQUFJLEVBQUUsY0FBZSxLQUFLO0FBRTFCLFVBQUksT0FBNkI7QUFDakMsVUFBSSxTQUFTLFVBQVUsZ0JBQWdCO0FBRXZDLFVBQUksT0FBTyxTQUFTLEdBQUc7QUFFdEIsZUFBTyxPQUFPO0FBQUEsYUFDUjtBQUdOLFlBQUksUUFBTyxVQUFVLGFBQWE7QUFDbEMsY0FBTSxNQUFLLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixRQUFRO0FBQUE7QUFJekQsZ0JBQVUsV0FBVztBQUFBO0FBQUE7QUFBQTtBQUlsQiwyQkFBcUIsc0JBQU07QUFBQSxFQUs5QixZQUFZLEtBQVUsVUFBb0M7QUFDeEQsVUFBTTtBQUNOLFNBQUssV0FBVztBQUFBO0FBQUEsRUFHbEIsU0FBUztBQUNQLFVBQU0sRUFBQyxjQUFjO0FBRXJCLGNBQVUsU0FBUyxNQUFNLEVBQUUsTUFBTTtBQUVqQyxRQUFJLHdCQUFRLFdBQ1gsUUFBUSxnQkFDUixRQUFRLENBQUMsU0FDUixLQUFLLFNBQVMsQ0FBQyxVQUFVO0FBQ3ZCLFdBQUssT0FBTztBQUFBO0FBR2QsUUFBSSx3QkFBUSxXQUNYLFFBQVEsZ0JBQ1IsUUFBUSxDQUFDLFNBQ1IsS0FBSyxTQUFTLENBQUMsVUFBVTtBQUN2QixXQUFLLFFBQVE7QUFBQTtBQUdqQixRQUFJLHdCQUFRLFdBQ1gsVUFBVSxDQUFDLFFBQ1osSUFDSyxjQUFjLFVBQ2QsU0FDQSxRQUFRLE1BQU07QUFDZixXQUFLO0FBQ0wsV0FBSyxTQUFTLEtBQUs7QUFBQTtBQUFBO0FBQUEsRUFNM0IsVUFBVTtBQUNSLFFBQUksRUFBRSxjQUFjO0FBQ3BCLGNBQVU7QUFBQTtBQUFBOyIsCiAgIm5hbWVzIjogW10KfQo=
